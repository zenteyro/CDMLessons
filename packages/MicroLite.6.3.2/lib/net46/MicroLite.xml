<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MicroLite</name>
    </assembly>
    <members>
        <member name="T:MicroLite.Builder.WriteSqlBuilderBase">
            <summary>
            The base class for classes which build an <see cref="T:MicroLite.SqlQuery"/> to perform write operations.
            </summary>
        </member>
        <member name="T:MicroLite.Builder.SqlBuilderBase">
            <summary>
            The base class for classes which build an <see cref="T:MicroLite.SqlQuery"/>.
            </summary>
        </member>
        <member name="T:MicroLite.Builder.Syntax.IToSqlQuery">
            <summary>
            The interface to end the fluent build syntax.
            </summary>
            <remarks>
            It's a bit of a verbose hack, need to see if I can use cast operators instead somehow...
            </remarks>
        </member>
        <member name="T:MicroLite.IHideObjectMethods">
            <summary>
            An interface used to hide the 4 System.Object instance methods from the API in Visual Studio intellisense.
            </summary>
        </member>
        <member name="M:MicroLite.IHideObjectMethods.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MicroLite.IHideObjectMethods.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:MicroLite.IHideObjectMethods.GetType">
            <summary>
            Gets the type.
            </summary>
            <returns>The type of the object.</returns>
        </member>
        <member name="M:MicroLite.IHideObjectMethods.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MicroLite.Builder.Syntax.IToSqlQuery.ToSqlQuery">
            <summary>
            Creates a <see cref="T:MicroLite.SqlQuery"/> from the values specified.
            </summary>
            <returns>The created <see cref="T:MicroLite.SqlQuery"/>.</returns>
        </member>
        <member name="M:MicroLite.Builder.SqlBuilderBase.#ctor(MicroLite.Characters.SqlCharacters)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Builder.SqlBuilderBase"/> class.
            </summary>
            <param name="sqlCharacters">The SQL characters for the builder.</param>
        </member>
        <member name="M:MicroLite.Builder.SqlBuilderBase.ToSqlQuery">
            <summary>
            Creates a <see cref="T:MicroLite.SqlQuery"/> from the values specified.
            </summary>
            <returns>The created <see cref="T:MicroLite.SqlQuery"/>.</returns>
            <remarks>This method is called to return an SqlQuery once query has been defined.</remarks>
        </member>
        <member name="M:MicroLite.Builder.SqlBuilderBase.AppendTableName(MicroLite.Mapping.IObjectInfo)">
            <summary>
            Appends the table name to the inner sql.
            </summary>
            <param name="objectInfo">The object information.</param>
        </member>
        <member name="M:MicroLite.Builder.SqlBuilderBase.AppendTableName(System.String)">
            <summary>
            Appends the table name to the inner sql.
            </summary>
            <param name="table">The name of the table.</param>
        </member>
        <member name="P:MicroLite.Builder.SqlBuilderBase.Arguments">
            <summary>
            Gets the arguments currently added to the sql builder.
            </summary>
        </member>
        <member name="P:MicroLite.Builder.SqlBuilderBase.InnerSql">
            <summary>
            Gets the inner sql the sql builder.
            </summary>
        </member>
        <member name="P:MicroLite.Builder.SqlBuilderBase.SqlCharacters">
            <summary>
            Gets the SQL characters.
            </summary>
        </member>
        <member name="T:MicroLite.Builder.Syntax.Write.IWhere">
            <summary>
            The interface which specifies the where method in the fluent sql builder syntax.
            </summary>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Write.IWhere.Where(System.String)">
            <summary>
            Specifies the where clause for the query.
            </summary>
            <param name="column">The column name to use in the where clause.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentException">Thrown if column is null or empty.</exception>
        </member>
        <member name="T:MicroLite.Builder.Syntax.Write.IWhereSingleColumn">
            <summary>
            The interface which specifies the where in method in the fluent sql builder syntax.
            </summary>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Write.IWhereSingleColumn.Between(System.Object,System.Object)">
            <summary>
            Uses the specified arguments to filter the column.
            </summary>
            <param name="lower">The inclusive lower value.</param>
            <param name="upper">The inclusive upper value.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if lower or upper is null.</exception>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Write.IWhereSingleColumn.In(System.Object[])">
            <summary>
            Uses the specified arguments to filter the column.
            </summary>
            <param name="args">The arguments to filter the column.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if args is null.</exception>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Write.IWhereSingleColumn.In(MicroLite.SqlQuery[])">
            <summary>
            Uses the specified SQL queries as sub queries to filter the column.
            </summary>
            <param name="subQueries">The sub queries.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if subQueries is null.</exception>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Write.IWhereSingleColumn.In(MicroLite.SqlQuery)">
            <summary>
            Uses the specified SqlQuery as a sub query to filter the column.
            </summary>
            <param name="subQuery">The sub query.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if subQuery is null.</exception>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Write.IWhereSingleColumn.IsEqualTo(System.Object)">
            <summary>
            Uses the specified argument to filter the column.
            </summary>
            <param name="comparisonValue">The value to compare with.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Write.IWhereSingleColumn.IsGreaterThan(System.Object)">
            <summary>
            Uses the specified argument to filter the column.
            </summary>
            <param name="comparisonValue">The value to compare with.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Write.IWhereSingleColumn.IsGreaterThanOrEqualTo(System.Object)">
            <summary>
            Uses the specified argument to filter the column.
            </summary>
            <param name="comparisonValue">The value to compare with.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Write.IWhereSingleColumn.IsLessThan(System.Object)">
            <summary>
            Uses the specified argument to filter the column.
            </summary>
            <param name="comparisonValue">The value to compare with.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Write.IWhereSingleColumn.IsLessThanOrEqualTo(System.Object)">
            <summary>
            Uses the specified argument to filter the column.
            </summary>
            <param name="comparisonValue">The value to compare with.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Write.IWhereSingleColumn.IsLike(System.Object)">
            <summary>
            Uses the specified argument to filter the column.
            </summary>
            <param name="comparisonValue">The value to compare with.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Write.IWhereSingleColumn.IsNotEqualTo(System.Object)">
            <summary>
            Uses the specified argument to filter the column.
            </summary>
            <param name="comparisonValue">The value to compare with.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Write.IWhereSingleColumn.IsNotLike(System.Object)">
            <summary>
            Uses the specified argument to filter the column.
            </summary>
            <param name="comparisonValue">The value to compare with.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Write.IWhereSingleColumn.IsNotNull">
            <summary>
            Specifies that the specified column contains a value which is not null.
            </summary>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Write.IWhereSingleColumn.IsNull">
            <summary>
            Specifies that the specified column contains a value which is null.
            </summary>
            <returns>
            The next step in the fluent sql builder.
            </returns>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Write.IWhereSingleColumn.NotBetween(System.Object,System.Object)">
            <summary>
            Uses the specified arguments to filter the column.
            </summary>
            <param name="lower">The inclusive lower value.</param>
            <param name="upper">The inclusive upper value.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if lower or upper is null.</exception>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Write.IWhereSingleColumn.NotIn(System.Object[])">
            <summary>
            Uses the specified arguments to filter the column.
            </summary>
            <param name="args">The arguments to filter the column.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if args is null.</exception>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Write.IWhereSingleColumn.NotIn(MicroLite.SqlQuery[])">
            <summary>
            Uses the specified SQL queries as sub queries to filter the column.
            </summary>
            <param name="subQueries">The sub queries.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if subQueries is null.</exception>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Write.IWhereSingleColumn.NotIn(MicroLite.SqlQuery)">
            <summary>
            Uses the specified SqlQuery as a sub query to filter the column.
            </summary>
            <param name="subQuery">The sub query.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if subQuery is null.</exception>
        </member>
        <member name="T:MicroLite.Builder.Syntax.Write.IAndOr">
            <summary>
            The interface which specifies the and/or methods to extend the where clause in the fluent sql builder syntax.
            </summary>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Write.IAndOr.AndWhere(System.String)">
            <summary>
            Adds a column as an AND to the where clause of the query.
            </summary>
            <param name="column">The column name to use in the where clause.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentException">Thrown if column is null or empty.</exception>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Write.IAndOr.OrWhere(System.String)">
            <summary>
            Adds a column as an OR to the where clause of the query.
            </summary>
            <param name="column">The column name to use in the where clause.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentException">Thrown if column is null or empty.</exception>
        </member>
        <member name="T:MicroLite.Builder.Syntax.Write.IDeleteFrom">
            <summary>
            The interface which specifies the from method in the fluent sql builder syntax.
            </summary>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Write.IDeleteFrom.From(System.String)">
            <summary>
            Specifies the table to delete from.
            </summary>
            <param name="table">The name of the table.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Write.IDeleteFrom.From(System.Type)">
            <summary>
            Specifies the type to delete.
            </summary>
            <param name="forType">The type of object the query relates to.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Builder.DeleteSqlBuilder.#ctor(MicroLite.Characters.SqlCharacters)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Builder.DeleteSqlBuilder"/> class with the starting command text 'DELETE FROM '.
            </summary>
            <param name="sqlCharacters">The SQL characters.</param>
        </member>
        <member name="T:MicroLite.Builder.Syntax.Write.IInsertIntoTable">
            <summary>
            The interface which specifies the into method in the fluent insert sql builder syntax.
            </summary>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Write.IInsertIntoTable.Into(System.String)">
            <summary>
            Specifies the table to perform the query against.
            </summary>
            <param name="table">The name of the table.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Write.IInsertIntoTable.Into(System.Type)">
            <summary>
            Specifies the type to perform the query against.
            </summary>
            <param name="forType">The type of object the query relates to.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="T:MicroLite.Builder.Syntax.Write.IInsertColumn">
            <summary>
            The interface which specifies the column(s) method in the fluent insert sql builder syntax.
            </summary>
        </member>
        <member name="T:MicroLite.Builder.Syntax.Write.IInsertValue">
            <summary>
            The interface which specifies the value method in the fluent insert sql builder syntax.
            </summary>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Write.IInsertValue.Values(System.Object[])">
            <summary>
            Specifies the values to be inserted into the columns.
            </summary>
            <param name="columnValues">Values for the columns to be inserted.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Write.IInsertColumn.Columns(System.String[])">
            <summary>
            Specifies the columns in the table to have values inserted into.
            </summary>
            <param name="columnNames">Name of the columns to be inserted.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Builder.InsertSqlBuilder.#ctor(MicroLite.Characters.SqlCharacters)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Builder.InsertSqlBuilder"/> class with the starting command text 'INSERT INTO '.
            </summary>
            <param name="sqlCharacters">The SQL characters.</param>
        </member>
        <member name="T:MicroLite.Builder.RawWhereBuilder">
            <summary>
            A class which can be used to build a raw SQL WHERE clause.
            </summary>
            <remarks>
            This class can be used to build a WHERE clause which can be applied to the SqlBuilder
            without having to build it up using the fluent interface.
            </remarks>
        </member>
        <member name="M:MicroLite.Builder.RawWhereBuilder.Append(System.String)">
            <summary>
            Appends the specified predicate (the WHERE keyword will be set when calling ApplyTo so it doesn't need specifying in the predicate).
            </summary>
            <param name="predicate">The predicate to be appended.</param>
            <returns>The raw builder.</returns>
        </member>
        <member name="M:MicroLite.Builder.RawWhereBuilder.Append(System.String,System.Object)">
            <summary>
            Appends the specified predicate (the WHERE keyword will be set when calling ApplyTo so it doesn't need specifying in the predicate).
            </summary>
            <param name="predicate">The predicate to be appended.</param>
            <param name="arg">The argument value.</param>
            <returns>The raw builder.</returns>
        </member>
        <member name="M:MicroLite.Builder.RawWhereBuilder.Append(System.String,System.Object[])">
            <summary>
            Appends the specified predicate (the WHERE keyword will be set when calling ApplyTo so it doesn't need specifying in the predicate).
            </summary>
            <param name="predicate">The predicate to be appended.</param>
            <param name="args">The argument values.</param>
            <returns>The raw builder.</returns>
        </member>
        <member name="M:MicroLite.Builder.RawWhereBuilder.ApplyTo(MicroLite.Builder.Syntax.Read.IWhereOrOrderBy)">
            <summary>
            Applies the predicate defined in this predicate builder to the result of SqlBuilder.Select().From().
            </summary>
            <param name="selectFrom">The result of the <see cref="T:MicroLite.Builder.SqlBuilder"/> select from method call.</param>
            <returns>
            The <see cref="T:MicroLite.Builder.Syntax.Read.IAndOrOrderBy"/> which is returned by the SqlBuilder after applying the Where clause.
            </returns>
            <exception cref="T:System.ArgumentNullException">thrown if selectFrom is null.</exception>
        </member>
        <member name="M:MicroLite.Builder.RawWhereBuilder.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:MicroLite.Builder.Syntax.Read.ISelectFrom">
            <summary>
            The interface which specifies the from method in the fluent sql builder syntax.
            </summary>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.ISelectFrom.From(System.String)">
            <summary>
            Specifies the table to perform the query against.
            </summary>
            <param name="table">The name of the table.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentException">Thrown if table is null or empty.</exception>
            <example>
            <code>
            var query = SqlBuilder.Select("Col1", "Col2").From("Customers")... // Add remainder of query
            </code>
            </example>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.ISelectFrom.From(System.Type)">
            <summary>
            Specifies the type to perform the query against.
            </summary>
            <param name="forType">The type of object the query relates to.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <example>
            If the select criteria is * then all mapped columns will be used in the select list instead, otherwise the specified columns will be used.
            <code>
            var query = SqlBuilder.Select("Col1", "Col2").From(typeof(Customer))... // Add remainder of query
            </code>
            </example>
            <remarks>Results in all columns being named if the select list is 'SELECT *'.</remarks>
        </member>
        <member name="T:MicroLite.Builder.Syntax.Read.IFunctionOrFrom">
            <summary>
            The interface which specifies the from method or function in the fluent sql builder syntax.
            </summary>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IFunctionOrFrom.Average(System.String)">
            <summary>
            Selects the average value in the specified column.
            </summary>
            <param name="columnName">The column to query.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentException">Thrown if columnName is null or empty.</exception>
            <example>
            A simple query to find the average order total for a customer. By default, the result will be aliased as the column name.
            <code>
            var sqlQuery = SqlBuilder
                .Select()
                .Average("Total")
                .From(typeof(Invoice))
                .Where("CustomerId = @p0", 1022)
                .ToSqlQuery();
            </code>
            Will generate SELECT AVG(Total) AS Total FROM Invoices WHERE (CustomerId = @p0)
            </example>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IFunctionOrFrom.Average(System.String,System.String)">
            <summary>
            Selects the average value in the specified column.
            </summary>
            <param name="columnName">The column to query.</param>
            <param name="columnAlias">The alias in the result set for the calculated column.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentException">Thrown if columnName or columnAlias is null or empty.</exception>
            <example>
            A simple query to find the average order total for a customer. We can specify a custom column alias if required.
            <code>
            var sqlQuery = SqlBuilder
                .Select()
                .Average("Total", columnAlias: "AverageTotal")
                .From(typeof(Invoice))
                .Where("CustomerId = @p0", 1022)
                .ToSqlQuery();
            </code>
            Will generate SELECT AVG(Total) AS AverageTotal FROM Invoices WHERE (CustomerId = @p0)
            </example>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IFunctionOrFrom.Count(System.String)">
            <summary>
            Selects the number of records which match the specified filter.
            </summary>
            <param name="columnName">The column to query.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentException">Thrown if columnName is null or empty.</exception>
            <example>
            A simple query to find the number of customers. By default, the result will be aliased as the column name.
            <code>
            var sqlQuery = SqlBuilder
                .Select()
                .Count("CustomerId")
                .From(typeof(Customer))
                .ToSqlQuery();
            </code>
            Will generate SELECT COUNT(CustomerId) AS CustomerId FROM Customers
            </example>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IFunctionOrFrom.Count(System.String,System.String)">
            <summary>
            Selects the number of records which match the specified filter.
            </summary>
            <param name="columnName">The column to query.</param>
            <param name="columnAlias">The alias in the result set for the calculated column.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentException">Thrown if columnName or columnAlias is null or empty.</exception>
            <example>
            A simple query to find the number of customers. We can specify a custom column alias if required.
            <code>
            var sqlQuery = SqlBuilder
                .Select()
                .Count("CustomerId", columnAlias: "CustomerCount")
                .From(typeof(Customer))
                .ToSqlQuery();
            </code>
            Will generate SELECT COUNT(CustomerId) AS CustomerCount FROM Customers
            </example>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IFunctionOrFrom.Distinct(System.String)">
            <summary>
            Selects the distinct values in the specified column.
            </summary>
            <param name="column">The column to be included in the query.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentException">Thrown if columnName is null or empty.</exception>
            <example>
            A simple query to find the distinct order totals for a customer.
            <code>
            var sqlQuery = SqlBuilder
                .Select()
                .Distinct("Total")
                .From(typeof(Invoice))
                .Where("CustomerId = @p0", 1022)
                .ToSqlQuery();
            </code>
            Will generate SELECT DISTINCT Total FROM Invoices WHERE (CustomerId = @p0)
            </example>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IFunctionOrFrom.Distinct(System.String[])">
            <summary>
            Selects the distinct values in the specified columns.
            </summary>
            <param name="columns">The columns to be included in the query.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentException">Thrown if columns is null.</exception>
            <example>
            A simple query to find the distinct order totals and dates for a customer.
            <code>
            var sqlQuery = SqlBuilder
                .Select()
                .Distinct("Total", "Date")
                .From(typeof(Invoice))
                .Where("CustomerId = @p0", 1022)
                .ToSqlQuery();
            </code>
            Will generate SELECT DISTINCT Total, Date FROM Invoices WHERE (CustomerId = @p0)
            </example>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IFunctionOrFrom.Max(System.String)">
            <summary>
            Selects the maximum value in the specified column.
            </summary>
            <param name="columnName">The column to query.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentException">Thrown if columnName is null or empty.</exception>
            <example>
            A simple query to find the max order total for a customer. By default, the result will be aliased as the column name.
            <code>
            var sqlQuery = SqlBuilder
                .Select()
                .Max("Total")
                .From(typeof(Invoice))
                .Where("CustomerId = @p0", 1022)
                .ToSqlQuery();
            </code>
            Will generate SELECT MAX(Total) AS Total FROM Invoices WHERE (CustomerId = @p0)
            </example>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IFunctionOrFrom.Max(System.String,System.String)">
            <summary>
            Selects the maximum value in the specified column.
            </summary>
            <param name="columnName">The column to query.</param>
            <param name="columnAlias">The alias in the result set for the calculated column.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentException">Thrown if columnName or columnAlias is null or empty.</exception>
            <example>
            A simple query to find the max order total for a customer. We can specify a custom column alias if required.
            <code>
            var sqlQuery = SqlBuilder
                .Select()
                .Max("Total", columnAlias: "MaxTotal")
                .From(typeof(Invoice))
                .Where("CustomerId = @p0", 1022)
                .ToSqlQuery();
            </code>
            Will generate SELECT MAX(Total) AS MaxTotal FROM Invoices WHERE (CustomerId = @p0)
            </example>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IFunctionOrFrom.Min(System.String)">
            <summary>
            Selects the minimum value in the specified column.
            </summary>
            <param name="columnName">The column to query.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentException">Thrown if columnName is null or empty.</exception>
            <example>
            A simple query to find the min order total for a customer. By default, the result will be aliased as the column name.
            <code>
            var sqlQuery = SqlBuilder
                .Select()
                .Min("Total")
                .From(typeof(Invoice))
                .Where("CustomerId = @p0", 1022)
                .ToSqlQuery();
            </code>
            Will generate SELECT MIN(Total) AS Total FROM Invoices WHERE (CustomerId = @p0)
            </example>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IFunctionOrFrom.Min(System.String,System.String)">
            <summary>
            Selects the minimum value in the specified column.
            </summary>
            <param name="columnName">The column to query.</param>
            <param name="columnAlias">The alias in the result set for the calculated column.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentException">Thrown if columnName or columnAlias is null or empty.</exception>
            <example>
            A simple query to find the min order total for a customer. We can specify a custom column alias if required.
            <code>
            var sqlQuery = SqlBuilder
                .Select()
                .Min("Total", columnAlias: "MinTotal")
                .From(typeof(Invoice))
                .Where("CustomerId = @p0", 1022)
                .ToSqlQuery();
            </code>
            Will generate SELECT MIN(Total) AS MinTotal FROM Invoices WHERE (CustomerId = @p0)
            </example>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IFunctionOrFrom.Sum(System.String)">
            <summary>
            Selects the sum of the values in the specified column.
            </summary>
            <param name="columnName">The column to query.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentException">Thrown if columnName is null or empty.</exception>
            <example>
            A simple query to find the total order total for a customer. By default, the result will be aliased as the column name.
            <code>
            var sqlQuery = SqlBuilder
                .Select()
                .Sum("Total")
                .From(typeof(Invoice))
                .Where("CustomerId = @p0", 1022)
                .ToSqlQuery();
            </code>
            Will generate SELECT SUM(Total) AS Total FROM Invoices WHERE (CustomerId = @p0)
            </example>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IFunctionOrFrom.Sum(System.String,System.String)">
            <summary>
            Selects the sum of the values in the specified column.
            </summary>
            <param name="columnName">The column to query.</param>
            <param name="columnAlias">The alias in the result set for the calculated column.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentException">Thrown if columnName or columnAlias is null or empty.</exception>
            <example>
            A simple query to find the total order total for a customer. We can specify a custom column alias if required.
            <code>
            var sqlQuery = SqlBuilder
                .Select()
                .Sum("Total", columnAlias: "SumTotal")
                .From(typeof(Invoice))
                .Where("CustomerId = @p0", 1022)
                .ToSqlQuery();
            </code>
            Will generate SELECT SUM(Total) AS SumTotal FROM Invoices WHERE (CustomerId = @p0)
            </example>
        </member>
        <member name="T:MicroLite.Builder.Syntax.Read.IWhereOrOrderBy">
            <summary>
            The interface which specifies the where method in the fluent sql builder syntax.
            </summary>
        </member>
        <member name="T:MicroLite.Builder.Syntax.Read.IGroupBy">
            <summary>
            The interface which specifies the group by method in the fluent sql builder syntax.
            </summary>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IGroupBy.GroupBy(System.String)">
            <summary>
            Groups the results of the query by the specified column.
            </summary>
            <param name="column">The column to group by.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentException">Thrown if column is null or empty.</exception>
            <example>
            <code>
            var sqlQuery = SqlBuilder
                .Select("CustomerId")
                .Max("Total")
                .From(typeof(Invoice))
                .GroupBy("CustomerId")
                .ToSqlQuery();
            </code>
            Will generate SELECT CustomerId, MAX(Total) AS Total FROM Invoices GROUP BY CustomerId
            </example>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IGroupBy.GroupBy(System.String[])">
            <summary>
            Groups the results of the query by the specified columns.
            </summary>
            <param name="columns">The columns to group by.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if columns is null.</exception>
            <example>
            <code>
            var sqlQuery = SqlBuilder
                .Select("CustomerId, OrderDate")
                .Max("Total")
                .From(typeof(Invoice))
                .GroupBy("CustomerId, OrderDate")
                .ToSqlQuery();
            </code>
            Will generate SELECT CustomerId, OrderDate, MAX(Total) AS Total FROM Invoices GROUP BY CustomerId, OrderDate
            </example>
        </member>
        <member name="T:MicroLite.Builder.Syntax.Read.IOrderBy">
            <summary>
            The interface which specifies the order by method in the fluent sql builder syntax.
            </summary>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IOrderBy.OrderByAscending(System.String)">
            <summary>
            Orders the results of the query by the specified column in ascending order.
            </summary>
            <param name="column">The column to order by.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentException">Thrown if column is null or empty.</exception>
            <example>
            <code>
            var query = SqlBuilder
                .Select("*")
                .From(typeof(Customer))
                .OrderByAscending("CustomerId")
                .ToSqlQuery();
            </code>
            Would generate SELECT [Columns] FROM Customers ORDER BY CustomerId ASC
            </example>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IOrderBy.OrderByAscending(System.String[])">
            <summary>
            Orders the results of the query by the specified columns in ascending order.
            </summary>
            <param name="columns">The columns to order by.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentException">Thrown if columns is null.</exception>
            <example>
            <code>
            var query = SqlBuilder
                .Select("*")
                .From(typeof(Customer))
                .OrderByDescending("FirstName", "LastName")
                .ToSqlQuery();
            </code>
            Would generate SELECT [Columns] FROM Customers ORDER BY FirstName, LastName ASC
            </example>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IOrderBy.OrderByDescending(System.String)">
            <summary>
            Orders the results of the query by the specified column in descending order.
            </summary>
            <param name="column">The column to order by.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentException">Thrown if column is null or empty.</exception>
            <example>
            <code>
            var query = SqlBuilder
                .Select("*")
                .From(typeof(Customer))
                .OrderByDescending("CustomerId")
                .ToSqlQuery();
            </code>
            Would generate SELECT [Columns] FROM Customers ORDER BY CustomerId DESC
            </example>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IOrderBy.OrderByDescending(System.String[])">
            <summary>
            Orders the results of the query by the specified columns in descending order.
            </summary>
            <param name="columns">The columns to order by.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentException">Thrown if columns is null.</exception>
            <example>
            <code>
            var query = SqlBuilder
                .Select("*")
                .From(typeof(Customer))
                .OrderByDescending("FirstName", "LastName")
                .ToSqlQuery();
            </code>
            Would generate SELECT [Columns] FROM Customers ORDER BY FirstName, LastName DESC
            </example>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IWhereOrOrderBy.Where">
            <summary>
            Specifies the where clause for the query.
            </summary>
            <returns>The next step in the fluent sql builder.</returns>
            <example>
            This method allows us to specify a sub query for the EXISTS keyword.
            <code>
            var query = SqlBuilder
                .Select("*")
                .From(typeof(Customer))
                .Where()
                ...
            </code>
            </example>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IWhereOrOrderBy.Where(System.String)">
            <summary>
            Specifies the where clause for the query.
            </summary>
            <param name="column">The column name to use in the where clause.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentException">Thrown if column is null or empty.</exception>
            <example>
            This method allows us to specify a column to be used with the BETWEEN or IN keywords.
            <code>
            var query = SqlBuilder
                .Select("*")
                .From(typeof(Customer))
                .Where("DateRegistered")
                ...
            </code>
            </example>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IWhereOrOrderBy.Where(System.String,System.Object[])">
            <summary>
            Specifies the where clause for the query.
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="args">The args.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentException">Thrown if predicate is null or empty.</exception>
            <example>
            Adds the first predicate to the query.
            <code>
            var query = SqlBuilder
                .Select("*")
                .From(typeof(Customer))
                .Where("LastName = @p0", "Smith")
                .ToSqlQuery();
            </code>
            Would generate SELECT [Columns] FROM Customers WHERE (LastName = @p0)
            </example>
            <example>
            You can refer to the same parameter multiple times
            <code>
            var query = SqlBuilder
                .Select("*")
                .From(typeof(Customer))
                .Where("LastName = @p0 OR @p0 IS NULL", lastName)
                .ToSqlQuery();
            </code>
            Would generate SELECT [Columns] FROM Customers WHERE (LastName = @p0 OR @p0 IS NULL)
            </example>
        </member>
        <member name="T:MicroLite.Builder.Syntax.Read.IAndOrOrderBy">
            <summary>
            The interface which specifies the and/or methods to extend the where clause in the fluent sql builder syntax.
            </summary>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IAndOrOrderBy.AndWhere(System.String)">
            <summary>
            Adds a column as an AND to the where clause of the query.
            </summary>
            <param name="column">The column name to use in the where clause.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentException">Thrown if column is null or empty.</exception>
            <example>
            This method allows us to specify a column to be used with the BETWEEN or IN keywords which is added to the query as an AND.
            <code>
            var query = SqlBuilder
                .Select("*")
                .From(typeof(Customer))
                .Where("LastName = @p0", "Smith")
                .AndWhere("DateRegistered")
                ...
            </code>
            </example>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IAndOrOrderBy.AndWhere(System.String,System.Object[])">
            <summary>
            Adds a predicate as an AND to the where clause of the query.
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="args">The args.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentException">Thrown if predicate is null or empty.</exception>
            <example>
            Adds the an additional predicate to the query as an AND.
            <code>
            var query = SqlBuilder
                .Select("*")
                .From(typeof(Customer))
                .Where("FirstName = @p0", "John")
                .AndWhere("LastName = @p0", "Smith") // Each time, the parameter number relates to the individual method call.
                .ToSqlQuery();
            </code>
            Would generate SELECT {Columns} FROM Customers WHERE (FirstName = @p0) AND (LastName = @p1)
            @p0 would be John
            @p1 would be Smith
            </example>
            <example>
            Additionally, we could construct the query as follows:
            <code>
            var query = SqlBuilder
                .Select("*")
                .From(typeof(Customer))
                .Where("FirstName = @p0 AND LastName = @p1", "John", "Smith")
                .ToSqlQuery();
            </code>
            Would generate SELECT {Columns} FROM Customers WHERE (FirstName = @p0 AND LastName = @p1)
            @p0 would be John
            @p1 would be Smith
            </example>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IAndOrOrderBy.OrWhere(System.String)">
            <summary>
            Adds a column as an OR to the where clause of the query.
            </summary>
            <param name="column">The column name to use in the where clause.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentException">Thrown if column is null or empty.</exception>
            <example>
            This method allows us to specify a column to be used with the BETWEEN or IN keywords which is added to the query as an OR.
            <code>
            var query = SqlBuilder
                .Select("*")
                .From(typeof(Customer))
                .Where("LastName = @p0", "Smith")
                .OrWhere("DateRegistered")
                ...
            </code>
            </example>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IAndOrOrderBy.OrWhere(System.String,System.Object[])">
            <summary>
            Adds a predicate as an OR to the where clause of the query.
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="args">The args.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentException">Thrown if predicate is null or empty.</exception>
            <example>
            Adds the an additional predicate to the query as an OR.
            <code>
            var query = SqlBuilder
                .Select("*")
                .From(typeof(Customer))
                .Where("LastName = @p0", "Smith")
                .OrWhere("LastName = @p0", "Smithson") // Each time, the parameter number relates to the individual method call.
                .ToSqlQuery();
            </code>
            Would generate SELECT [Columns] FROM Customers WHERE (LastName = @p0) OR (LastName = @p1)
            @p0 would be Smith
            @p1 would be Smithson
            </example>
            <example>
            Additionally, we could construct the query as follows:
            <code>
            var query = SqlBuilder
                .Select("*")
                .From(typeof(Customer))
                .Where("LastName = @p0 OR LastName = @p1", "Smith", "Smithson")
                .ToSqlQuery();
            </code>
            Would generate SELECT [Columns] FROM Customers WHERE (LastName = @p0 OR LastName = @p1)
            @p0 would be Smith
            @p1 would be Smithson
            </example>
        </member>
        <member name="T:MicroLite.Builder.Syntax.Read.IWhereSingleColumn">
            <summary>
            The interface which specifies the where in method in the fluent sql builder syntax.
            </summary>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IWhereSingleColumn.Between(System.Object,System.Object)">
            <summary>
            Uses the specified arguments to filter the column.
            </summary>
            <param name="lower">The inclusive lower value.</param>
            <param name="upper">The inclusive upper value.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if lower or upper is null.</exception>
            <example>
            This method allows us to specify that a column is filtered with the results being between the 2 specified values.
            <code>
            var query = SqlBuilder
                .Select("*")
                .From(typeof(Customer))
                .Where("DateRegistered")
                .Between(new DateTime(2000, 1, 1), new DateTime(2009, 12, 31))
                .ToSqlQuery();
            </code>
            Will generate SELECT {Columns} FROM Customers WHERE (DateRegistered BETWEEN @p0 AND @p1)
            </example>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IWhereSingleColumn.In(System.Object[])">
            <summary>
            Uses the specified arguments to filter the column.
            </summary>
            <param name="args">The arguments to filter the column.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if args is null.</exception>
            <example>
            This method allows us to specify that a column is filtered with the results being in the specified values.
            <code>
            var query = SqlBuilder
                .Select("*")
                .From(typeof(Customer))
                .Where("Column1")
                .In("X", "Y", "Z")
                .ToSqlQuery();
            </code>
            Will generate SELECT {Columns} FROM Customers WHERE (Column1 IN (@p0, @p1, @p2))
            </example>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IWhereSingleColumn.In(MicroLite.SqlQuery[])">
            <summary>
            Uses the specified SQL queries as sub queries to filter the column.
            </summary>
            <param name="subQueries">The sub queries.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if subQueries is null.</exception>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IWhereSingleColumn.In(MicroLite.SqlQuery)">
             <summary>
             Uses the specified SqlQuery as a sub query to filter the column.
             </summary>
             <param name="subQuery">The sub query.</param>
             <returns>The next step in the fluent sql builder.</returns>
             <exception cref="T:System.ArgumentNullException">Thrown if subQuery is null.</exception>
             <example>
             This method allows us to specify that a column is filtered with the results being in the specified values.
             <code>
             var customerQuery = SqlBuilder
                 .Select("CustomerId")
                 .From(typeof(Customer))
                 .Where("Age &gt; @p0", 40)
                 .ToSqlQuery();
            
             var query = SqlBuilder
                 .Select("*")
                 .From(typeof(Invoice))
                 .Where("CustomerId")
                 .In(customerQuery)
                 .ToSqlQuery();
             </code>
             Will generate SELECT {Columns} FROM Invoices WHERE (CustomerId IN (SELECT CustomerId FROM Customers WHERE Age &gt; @p0))
             </example>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IWhereSingleColumn.IsEqualTo(System.Object)">
            <summary>
            Uses the specified argument to filter the column.
            </summary>
            <param name="comparisonValue">The value to compare with.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <example>
            This method allows us to specify that a column is filtered with the results being equal to the specified comparisonValue.
            <code>
            var query = SqlBuilder
                .Select("*")
                .From(typeof(Customer))
                .Where("DateRegistered")
                .IsEqualTo(new DateTime(2000, 1, 1))
                .ToSqlQuery();
            </code>
            Will generate SELECT {Columns} FROM Customers WHERE (DateRegistered = @p0)
            </example>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IWhereSingleColumn.IsEqualTo(MicroLite.SqlQuery)">
             <summary>
             Uses the specified sub query to filter the column.
             </summary>
             <param name="subQuery">The sub query to compare with.</param>
             <returns>The next step in the fluent sql builder.</returns>
             <example>
             This method allows us to specify that a column is filtered with the results being equal to the result of the specified sub query.
             <code>
             var subQuery = new SqlQuery("SELECT TOP 1 CustomerId FROM Invoices ORDER BY Total DESC");
            
             var query = SqlBuilder
                 .Select("*")
                 .From(typeof(Customer))
                 .Where("CustomerId")
                 .IsEqualTo(subQuery)
                 .ToSqlQuery();
             </code>
             Will generate SELECT {Columns} FROM Customers WHERE (CustomerId = (SELECT TOP 1 CustomerId FROM Invoices ORDER BY Total DESC))
             </example>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IWhereSingleColumn.IsGreaterThan(System.Object)">
            <summary>
            Uses the specified argument to filter the column.
            </summary>
            <param name="comparisonValue">The value to compare with.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <example>
            This method allows us to specify that a column is filtered with the results being greater than the specified comparisonValue.
            <code>
            var query = SqlBuilder
                .Select("*")
                .From(typeof(Customer))
                .Where("DateRegistered")
                .IsGreaterThan(new DateTime(2000, 1, 1))
                .ToSqlQuery();
            </code>
            Will generate SELECT {Columns} FROM Customers WHERE (DateRegistered > @p0)
            </example>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IWhereSingleColumn.IsGreaterThanOrEqualTo(System.Object)">
            <summary>
            Uses the specified argument to filter the column.
            </summary>
            <param name="comparisonValue">The value to compare with.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <example>
            This method allows us to specify that a column is filtered with the results being greater than or equal to the specified comparisonValue.
            <code>
            var query = SqlBuilder
                .Select("*")
                .From(typeof(Customer))
                .Where("DateRegistered")
                .IsGreaterThanOrEqualTo(new DateTime(2000, 1, 1))
                .ToSqlQuery();
            </code>
            Will generate SELECT {Columns} FROM Customers WHERE (DateRegistered >= @p0)
            </example>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IWhereSingleColumn.IsLessThan(System.Object)">
            <summary>
            Uses the specified argument to filter the column.
            </summary>
            <param name="comparisonValue">The value to compare with.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <example>
            This method allows us to specify that a column is filtered with the results being less than the specified comparisonValue.
            <code>
            var query = SqlBuilder
                .Select("*")
                .From(typeof(Customer))
                .Where("DateRegistered")
                .IsLessThan(new DateTime(2000, 1, 1))
                .ToSqlQuery();
            </code>
            Will generate SELECT {Columns} FROM Customers WHERE (DateRegistered <!--<--> @p0)
            </example>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IWhereSingleColumn.IsLessThanOrEqualTo(System.Object)">
            <summary>
            Uses the specified argument to filter the column.
            </summary>
            <param name="comparisonValue">The value to compare with.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <example>
            This method allows us to specify that a column is filtered with the results being less than or equal to the specified comparisonValue.
            <code>
            var query = SqlBuilder
                .Select("*")
                .From(typeof(Customer))
                .Where("DateRegistered")
                .IsLessThanOrEqualTo(new DateTime(2000, 1, 1))
                .ToSqlQuery();
            </code>
            Will generate SELECT {Columns} FROM Customers WHERE (DateRegistered &lt;= @p0)
            </example>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IWhereSingleColumn.IsLike(System.Object)">
            <summary>
            Uses the specified argument to filter the column.
            </summary>
            <param name="comparisonValue">The value to compare with.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <example>
            This method allows us to specify that a column is filtered with the results being like the specified comparisonValue.
            <code>
            var query = SqlBuilder
                .Select("*")
                .From(typeof(Customer))
                .Where("LastName")
                .IsLike("Smi%")
                .ToSqlQuery();
            </code>
            Will generate SELECT {Columns} FROM Customers WHERE (LastName LIKE @p0)
            </example>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IWhereSingleColumn.IsNotEqualTo(System.Object)">
            <summary>
            Uses the specified argument to filter the column.
            </summary>
            <param name="comparisonValue">The value to compare with.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <example>
            This method allows us to specify that a column is filtered with the results not being equal to the specified comparisonValue.
            <code>
            var query = SqlBuilder
                .Select("*")
                .From(typeof(Customer))
                .Where("DateRegistered")
                .IsNotEqualTo(new DateTime(2000, 1, 1))
                .ToSqlQuery();
            </code>
            Will generate SELECT {Columns} FROM Customers WHERE (DateRegistered &lt;&gt; @p0)
            </example>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IWhereSingleColumn.IsNotEqualTo(MicroLite.SqlQuery)">
             <summary>
             Uses the specified sub query to filter the column.
             </summary>
             <param name="subQuery">The sub query to compare with.</param>
             <returns>The next step in the fluent sql builder.</returns>
             <example>
             This method allows us to specify that a column is filtered with the results not being equal to the result of the specified sub query.
             <code>
             var subQuery = new SqlQuery("SELECT TOP 1 CustomerId FROM Invoices ORDER BY Total DESC");
            
             var query = SqlBuilder
                 .Select("*")
                 .From(typeof(Customer))
                 .Where("CustomerId")
                 .IsNotEqualTo(subQuery)
                 .ToSqlQuery();
             </code>
             Will generate SELECT {Columns} FROM Customers WHERE (CustomerId &lt;&gt; (SELECT TOP 1 CustomerId FROM Invoices ORDER BY Total DESC))
             </example>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IWhereSingleColumn.IsNotLike(System.Object)">
            <summary>
            Uses the specified argument to filter the column.
            </summary>
            <param name="comparisonValue">The value to compare with.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <example>
            This method allows us to specify that a column is filtered with the results not being like the specified comparisonValue.
            <code>
            var query = SqlBuilder
                .Select("*")
                .From(typeof(Customer))
                .Where("LastName")
                .IsNotLike("Smi%")
                .ToSqlQuery();
            </code>
            Will generate SELECT {Columns} FROM Customers WHERE (LastName NOT LIKE @p0)
            </example>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IWhereSingleColumn.IsNotNull">
            <summary>
            Specifies that the specified column contains a value which is not null.
            </summary>
            <returns>
            The next step in the fluent sql builder.
            </returns>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IWhereSingleColumn.IsNull">
            <summary>
            Specifies that the specified column contains a value which is null.
            </summary>
            <returns>
            The next step in the fluent sql builder.
            </returns>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IWhereSingleColumn.NotBetween(System.Object,System.Object)">
            <summary>
            Uses the specified arguments to filter the column.
            </summary>
            <param name="lower">The inclusive lower value.</param>
            <param name="upper">The inclusive upper value.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if lower or upper is null.</exception>
            <example>
            This method allows us to specify that a column is filtered with the results not being between the 2 specified values.
            <code>
            var query = SqlBuilder
                .Select("*")
                .From(typeof(Customer))
                .Where("DateRegistered")
                .NotBetween(new DateTime(2000, 1, 1), new DateTime(2009, 12, 31))
                .ToSqlQuery();
            </code>
            Will generate SELECT {Columns} FROM Customers WHERE (DateRegistered NOT BETWEEN @p0 AND @p1)
            </example>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IWhereSingleColumn.NotIn(System.Object[])">
            <summary>
            Uses the specified arguments to filter the column.
            </summary>
            <param name="args">The arguments to filter the column.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if args is null.</exception>
            <example>
            This method allows us to specify that a column is filtered with the results being in the specified values.
            <code>
            var query = SqlBuilder
                .Select("*")
                .From(typeof(Customer))
                .Where("Column1")
                .NotIn("X", "Y", "Z")
                .ToSqlQuery();
            </code>
            Will generate SELECT {Columns} FROM Customers WHERE (Column1 NOT IN (@p0, @p1, @p2))
            </example>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IWhereSingleColumn.NotIn(MicroLite.SqlQuery[])">
            <summary>
            Uses the specified SQL queries as sub queries to filter the column.
            </summary>
            <param name="subQueries">The sub queries.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if subQueries is null.</exception>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IWhereSingleColumn.NotIn(MicroLite.SqlQuery)">
             <summary>
             Uses the specified SqlQuery as a sub query to filter the column.
             </summary>
             <param name="subQuery">The sub query.</param>
             <returns>The next step in the fluent sql builder.</returns>
             <exception cref="T:System.ArgumentNullException">Thrown if subQuery is null.</exception>
             <example>
             This method allows us to specify that a column is filtered with the results being in the specified values.
             <code>
             var customerQuery = SqlBuilder
                 .Select("CustomerId")
                 .From(typeof(Customer))
                 .Where("Age &gt; @p0", 40)
                 .ToSqlQuery();
            
             var query = SqlBuilder
                 .Select("*")
                 .From(typeof(Invoice))
                 .Where("CustomerId")
                 .NotIn(customerQuery)
                 .ToSqlQuery();
             </code>
             Will generate SELECT {Columns} FROM Invoices WHERE (CustomerId NOT IN (SELECT CustomerId FROM Customers WHERE Age &gt; @p0))
             </example>
        </member>
        <member name="T:MicroLite.Builder.Syntax.Read.IHavingOrOrderBy">
            <summary>
            The interface which specifies the having method in the fluent sql builder syntax.
            </summary>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IHavingOrOrderBy.Having(System.String,System.Object)">
            <summary>
            Specifies the having clause for the query.
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="value">The argument value.</param>
            <exception cref="T:System.ArgumentException">Thrown if predicate is null or empty.</exception>
            <returns>
            The next step in the fluent sql builder.
            </returns>
            <example>
            <code>
            var sqlQuery = SqlBuilder
                .Select("CustomerId")
                .Max("Total")
                .From(typeof(Invoice))
                .GroupBy("CustomerId")
                .Having("MAX(Total) &gt; @p0", 10000M)
                .ToSqlQuery();
            </code>
            Will generate SELECT CustomerId, MAX(Total) AS Total FROM Invoices GROUP BY CustomerId HAVING MAX(Total) &gt; @p0
            </example>
        </member>
        <member name="T:MicroLite.Builder.Syntax.Read.IWhereExists">
            <summary>
            The interface which specifies the where in method in the fluent sql builder syntax.
            </summary>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IWhereExists.Exists(MicroLite.SqlQuery)">
             <summary>
             Uses the specified SqlQuery as a sub query to filter the results.
             </summary>
             <param name="subQuery">The sub query.</param>
             <returns>The next step in the fluent sql builder.</returns>
             <exception cref="T:System.ArgumentNullException">Thrown if subQuery is null.</exception>
             <example>
             This method allows us to specify that the results are filtered with the results being in the specified sub query.
             <code>
             var customerQuery = SqlBuilder
                 .Select("CustomerId")
                 .From(typeof(Customer))
                 .Where("Age &gt; @p0", 40)
                 .ToSqlQuery();
            
             var query = SqlBuilder
                 .Select("*")
                 .From(typeof(Invoice))
                 .Where()
                 .InExists(customerQuery)
                 .ToSqlQuery();
             </code>
             Will generate SELECT {Columns} FROM Invoices WHERE EXISTS (SELECT CustomerId FROM Customers WHERE Age &gt; @p0)
             </example>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Read.IWhereExists.NotExists(MicroLite.SqlQuery)">
             <summary>
             Uses the specified SqlQuery as a sub query to filter the results.
             </summary>
             <param name="subQuery">The sub query.</param>
             <returns>The next step in the fluent sql builder.</returns>
             <exception cref="T:System.ArgumentNullException">Thrown if subQuery is null.</exception>
             <example>
             This method allows us to specify that the results are filtered with the results not being in the specified sub query.
             <code>
             var customerQuery = SqlBuilder
                 .Select("CustomerId")
                 .From(typeof(Customer))
                 .Where("Age &gt; @p0", 40)
                 .ToSqlQuery();
            
             var query = SqlBuilder
                 .Select("*")
                 .From(typeof(Invoice))
                 .Where()
                 .InExists(customerQuery)
                 .ToSqlQuery();
             </code>
             Will generate SELECT {Columns} FROM Invoices WHERE EXISTS (SELECT CustomerId FROM Customers WHERE Age &gt; @p0)
             </example>
        </member>
        <member name="M:MicroLite.Builder.SelectSqlBuilder.#ctor(MicroLite.Characters.SqlCharacters)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Builder.SelectSqlBuilder"/> class with the starting command text 'SELECT *'.
            </summary>
            <param name="sqlCharacters">The SQL characters.</param>
        </member>
        <member name="M:MicroLite.Builder.SelectSqlBuilder.#ctor(MicroLite.Characters.SqlCharacters,System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Builder.SelectSqlBuilder"/> class with an optional list of columns to select.
            </summary>
            <param name="sqlCharacters">The SQL characters.</param>
            <param name="column">The column.</param>
        </member>
        <member name="M:MicroLite.Builder.SelectSqlBuilder.#ctor(MicroLite.Characters.SqlCharacters,System.String[])">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Builder.SelectSqlBuilder"/> class with an optional list of columns to select.
            </summary>
            <param name="sqlCharacters">The SQL characters.</param>
            <param name="columns">The columns.</param>
        </member>
        <member name="T:MicroLite.Builder.SqlBuilder">
            <summary>
            A helper class for building an <see cref="T:MicroLite.SqlQuery"/>.
            </summary>
        </member>
        <member name="M:MicroLite.Builder.SqlBuilder.Delete">
            <summary>
            Creates a new delete query builder.
            </summary>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Builder.SqlBuilder.Execute(System.String)">
            <summary>
            Species the name of the procedure to be executed.
            </summary>
            <param name="procedure">The name of the stored procedure.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <remarks>If the stored procedure has no parameters, call .ToSqlQuery() otherwise add the parameters (see the WithParameter method).</remarks>
            <example>
            <code>
            var query = SqlBuilder.Execute("CustomersOver50").ToSqlQuery();
            </code>
            </example>
        </member>
        <member name="M:MicroLite.Builder.SqlBuilder.Insert">
            <summary>
            Creates a new insert query builder.
            </summary>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Builder.SqlBuilder.Select">
            <summary>
            Creates a new select query with no specified columns.
            </summary>
            <returns>The next step in the fluent sql builder.</returns>
            <example>
            Don't enter any column names, this is generally used if you want to just call a function such as Count.
            <code>
            var query = SqlBuilder.Select()...
            </code>
            </example>
        </member>
        <member name="M:MicroLite.Builder.SqlBuilder.Select(System.String)">
             <summary>
             Creates a new select query with a single specified column or '*'.
             </summary>
             <param name="column">The column (or wildcard *) to be included in the query.</param>
             <returns>The next step in the fluent sql builder.</returns>
             <example>
             Option 1, enter * followed by a table name
             <code>
             var query = SqlBuilder.Select("*").From("Customers")...
            
             // SELECT * FROM Customers
             // will be generated
             </code>
             </example>
             <example>
             Option 2, enter * followed by a type in From, all mapped columns will be specified in the SQL.
             <code>
             var query = SqlBuilder.Select("*").From(typeof(Customer))...
            
             // SELECT CustomerId, Name, DoB FROM Customers
             // will be generated
             </code>
             </example>
        </member>
        <member name="M:MicroLite.Builder.SqlBuilder.Select(System.String[])">
            <summary>
            Creates a new query which selects the specified columns.
            </summary>
            <param name="columns">The columns to be included in the query.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <example>
            Enter specific column names.
            <code>
            var query = SqlBuilder.Select("Name", "DoB")...
            </code>
            </example>
        </member>
        <member name="M:MicroLite.Builder.SqlBuilder.Update">
            <summary>
            Creates a new update query builder.
            </summary>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="T:MicroLite.Builder.Syntax.IWithParameter">
            <summary>
            The interface which specifies a parameter and argument for a stored procedure in the fluent sql builder syntax.
            </summary>
        </member>
        <member name="M:MicroLite.Builder.Syntax.IWithParameter.WithParameter(System.String,System.Object)">
            <summary>
            Specifies that the stored procedure should be executed the specified parameter and argument.
            </summary>
            <param name="parameter">The parameter to be added.</param>
            <param name="arg">The argument value for the parameter.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <example>
            Add each parameter separately, specifying the parameter name and value.
            <code>
            var sqlQuery = SqlBuilder
                .Execute("GetCustomerInvoices")
                .WithParameter("@CustomerId", 7633245)
                .WithParameter("@StartDate", DateTime.Today.AddMonths(-3))
                .WithParameter("@EndDate", DateTime.Today)
                .ToSqlQuery();
            </code>
            </example>
        </member>
        <member name="T:MicroLite.Builder.Syntax.Write.ISetOrWhere">
            <summary>
            The interface which specifies the value method in the fluent update sql builder syntax.
            </summary>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Write.ISetOrWhere.SetColumnValue(System.String,System.Object)">
            <summary>
            Specifies the column in the table and the new value for it.
            </summary>
            <param name="columnName">Name of the column to be updated.</param>
            <param name="columnValue">The new value for the column.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="T:MicroLite.Builder.Syntax.Write.IUpdate">
            <summary>
            The interface which specifies the table method in the fluent update sql builder syntax.
            </summary>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Write.IUpdate.Table(System.String)">
            <summary>
            Specifies the table to perform the query against.
            </summary>
            <param name="tableName">The name of the table.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Builder.Syntax.Write.IUpdate.Table(System.Type)">
            <summary>
            Specifies the type to perform the query against.
            </summary>
            <param name="forType">The type of object the query relates to.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Builder.UpdateSqlBuilder.#ctor(MicroLite.Characters.SqlCharacters)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Builder.UpdateSqlBuilder"/> class with the starting command text 'UPDATE '.
            </summary>
            <param name="sqlCharacters">The SQL characters.</param>
        </member>
        <member name="T:MicroLite.Characters.FirebirdSqlCharacters">
            <summary>
            The implementation of <see cref="T:MicroLite.Characters.SqlCharacters"/> for Firebird.
            </summary>
        </member>
        <member name="T:MicroLite.Characters.SqlCharacters">
            <summary>
            A class containing the SQL characters for an SQL Dialect.
            </summary>
        </member>
        <member name="M:MicroLite.Characters.SqlCharacters.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Characters.SqlCharacters"/> class.
            </summary>
        </member>
        <member name="M:MicroLite.Characters.SqlCharacters.EscapeSql(System.String)">
            <summary>
            Escapes the specified SQL using the left and right delimiters.
            </summary>
            <param name="sql">The SQL to be escaped.</param>
            <returns>The escaped SQL.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if sql is null.</exception>
        </member>
        <member name="M:MicroLite.Characters.SqlCharacters.GetParameterName(System.Int32)">
            <summary>
            Gets the name of the parameter for the specified position.
            </summary>
            <param name="position">The parameter position.</param>
            <returns>The name of the parameter for the specified position.</returns>
        </member>
        <member name="M:MicroLite.Characters.SqlCharacters.IsEscaped(System.String)">
            <summary>
            Determines whether the specified SQL is escaped.
            </summary>
            <param name="sql">The SQL to check.</param>
            <returns>
              <c>true</c> if the specified SQL is escaped; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:MicroLite.Characters.SqlCharacters.Current">
            <summary>
            Gets or sets the current SqlCharacters or Empty if not otherwise specified.
            </summary>
            <remarks>
            Using CallContext internally allows us to set the correct SqlCharacters
            in a scenario where we have multiple session factories for different
            database providers active at once and SqlCharacters are used (via builder).
            The static defaultSqlCharacters is a fall-back so we don't end up with Empty
            characters.
            </remarks>
        </member>
        <member name="P:MicroLite.Characters.SqlCharacters.Empty">
            <summary>
            Gets an Empty set of SqlCharacters which does not support named parameters or escaping of values.
            </summary>
        </member>
        <member name="P:MicroLite.Characters.SqlCharacters.LeftDelimiter">
            <summary>
            Gets a string containing the delimiter used on the left hand side to escape an SQL value.
            </summary>
        </member>
        <member name="P:MicroLite.Characters.SqlCharacters.LikeWildcard">
            <summary>
            Gets a string containing the wildcard value for use in LIKE statements.
            </summary>
        </member>
        <member name="P:MicroLite.Characters.SqlCharacters.RightDelimiter">
            <summary>
            Gets a string containing the delimiter used on the right hand side to escape an SQL value.
            </summary>
        </member>
        <member name="P:MicroLite.Characters.SqlCharacters.SelectWildcard">
            <summary>
            Gets a string containing the wildcard value for use in SELECT statements.
            </summary>
        </member>
        <member name="P:MicroLite.Characters.SqlCharacters.SqlParameter">
            <summary>
            Gets a string containing the parameter value for use in parameterised statements.
            </summary>
        </member>
        <member name="P:MicroLite.Characters.SqlCharacters.StatementSeparator">
            <summary>
            Gets the character used to separate SQL statements.
            </summary>
        </member>
        <member name="P:MicroLite.Characters.SqlCharacters.StoredProcedureInvocationCommand">
            <summary>
            Gets the stored procedure invocation command.
            </summary>
        </member>
        <member name="P:MicroLite.Characters.SqlCharacters.SupportsNamedParameters">
            <summary>
            Gets a value indicating whether SQL parameters are named.
            </summary>
        </member>
        <member name="F:MicroLite.Characters.FirebirdSqlCharacters.Instance">
            <summary>
            The single instance of <see cref="T:MicroLite.Characters.SqlCharacters"/> for Firebird.
            </summary>
        </member>
        <member name="M:MicroLite.Characters.FirebirdSqlCharacters.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:MicroLite.Characters.FirebirdSqlCharacters"/> class from being created.
            </summary>
        </member>
        <member name="P:MicroLite.Characters.FirebirdSqlCharacters.LeftDelimiter">
            <summary>
            Gets the left delimiter character.
            </summary>
        </member>
        <member name="P:MicroLite.Characters.FirebirdSqlCharacters.RightDelimiter">
            <summary>
            Gets the right delimiter character.
            </summary>
        </member>
        <member name="P:MicroLite.Characters.FirebirdSqlCharacters.SqlParameter">
            <summary>
            Gets the SQL parameter.
            </summary>
        </member>
        <member name="P:MicroLite.Characters.FirebirdSqlCharacters.SupportsNamedParameters">
            <summary>
            Gets a value indicating whether SQL parameters are named.
            </summary>
        </member>
        <member name="T:MicroLite.Characters.MsSqlCharacters">
            <summary>
            The implementation of <see cref="T:MicroLite.Characters.SqlCharacters"/> for MsSql server.
            </summary>
        </member>
        <member name="F:MicroLite.Characters.MsSqlCharacters.Instance">
            <summary>
            The single instance of <see cref="T:MicroLite.Characters.SqlCharacters"/> for MsSql.
            </summary>
        </member>
        <member name="M:MicroLite.Characters.MsSqlCharacters.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:MicroLite.Characters.MsSqlCharacters"/> class from being created.
            </summary>
        </member>
        <member name="P:MicroLite.Characters.MsSqlCharacters.LeftDelimiter">
            <summary>
            Gets the left delimiter character.
            </summary>
        </member>
        <member name="P:MicroLite.Characters.MsSqlCharacters.RightDelimiter">
            <summary>
            Gets the right delimiter character.
            </summary>
        </member>
        <member name="P:MicroLite.Characters.MsSqlCharacters.SqlParameter">
            <summary>
            Gets the SQL parameter.
            </summary>
        </member>
        <member name="P:MicroLite.Characters.MsSqlCharacters.StoredProcedureInvocationCommand">
            <summary>
            Gets the stored procedure invocation command.
            </summary>
        </member>
        <member name="P:MicroLite.Characters.MsSqlCharacters.SupportsNamedParameters">
            <summary>
            Gets a value indicating whether SQL parameters are named.
            </summary>
        </member>
        <member name="T:MicroLite.Characters.MySqlCharacters">
            <summary>
            The implementation of <see cref="T:MicroLite.Characters.SqlCharacters"/> for MySql.
            </summary>
        </member>
        <member name="F:MicroLite.Characters.MySqlCharacters.Instance">
            <summary>
            The single instance of <see cref="T:MicroLite.Characters.SqlCharacters"/> for MySql.
            </summary>
        </member>
        <member name="M:MicroLite.Characters.MySqlCharacters.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:MicroLite.Characters.MySqlCharacters"/> class from being created.
            </summary>
        </member>
        <member name="P:MicroLite.Characters.MySqlCharacters.LeftDelimiter">
            <summary>
            Gets the left delimiter character.
            </summary>
        </member>
        <member name="P:MicroLite.Characters.MySqlCharacters.RightDelimiter">
            <summary>
            Gets the right delimiter character.
            </summary>
        </member>
        <member name="P:MicroLite.Characters.MySqlCharacters.SqlParameter">
            <summary>
            Gets the SQL parameter.
            </summary>
        </member>
        <member name="P:MicroLite.Characters.MySqlCharacters.StoredProcedureInvocationCommand">
            <summary>
            Gets the stored procedure invocation command.
            </summary>
        </member>
        <member name="P:MicroLite.Characters.MySqlCharacters.SupportsNamedParameters">
            <summary>
            Gets a value indicating whether SQL parameters are named.
            </summary>
        </member>
        <member name="T:MicroLite.Characters.PostgreSqlCharacters">
            <summary>
            The implementation of <see cref="T:MicroLite.Characters.SqlCharacters"/> for PostgreSql.
            </summary>
        </member>
        <member name="F:MicroLite.Characters.PostgreSqlCharacters.Instance">
            <summary>
            The single instance of <see cref="T:MicroLite.Characters.SqlCharacters"/> for PostgreSql.
            </summary>
        </member>
        <member name="M:MicroLite.Characters.PostgreSqlCharacters.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:MicroLite.Characters.PostgreSqlCharacters"/> class from being created.
            </summary>
        </member>
        <member name="P:MicroLite.Characters.PostgreSqlCharacters.LeftDelimiter">
            <summary>
            Gets the left delimiter character.
            </summary>
        </member>
        <member name="P:MicroLite.Characters.PostgreSqlCharacters.RightDelimiter">
            <summary>
            Gets the right delimiter character.
            </summary>
        </member>
        <member name="P:MicroLite.Characters.PostgreSqlCharacters.SqlParameter">
            <summary>
            Gets the SQL parameter.
            </summary>
        </member>
        <member name="P:MicroLite.Characters.PostgreSqlCharacters.StoredProcedureInvocationCommand">
            <summary>
            Gets the stored procedure invocation command.
            </summary>
        </member>
        <member name="P:MicroLite.Characters.PostgreSqlCharacters.SupportsNamedParameters">
            <summary>
            Gets a value indicating whether SQL parameters are named.
            </summary>
        </member>
        <member name="T:MicroLite.Characters.SQLiteCharacters">
            <summary>
            The implementation of <see cref="T:MicroLite.Characters.SqlCharacters"/> for SQLite.
            </summary>
        </member>
        <member name="F:MicroLite.Characters.SQLiteCharacters.Instance">
            <summary>
            The single instance of <see cref="T:MicroLite.Characters.SqlCharacters"/> for SQLite.
            </summary>
        </member>
        <member name="M:MicroLite.Characters.SQLiteCharacters.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:MicroLite.Characters.SQLiteCharacters"/> class from being created.
            </summary>
        </member>
        <member name="P:MicroLite.Characters.SQLiteCharacters.LeftDelimiter">
            <summary>
            Gets the left delimiter character.
            </summary>
        </member>
        <member name="P:MicroLite.Characters.SQLiteCharacters.RightDelimiter">
            <summary>
            Gets the right delimiter character.
            </summary>
        </member>
        <member name="P:MicroLite.Characters.SQLiteCharacters.SqlParameter">
            <summary>
            Gets the SQL parameter.
            </summary>
        </member>
        <member name="P:MicroLite.Characters.SQLiteCharacters.SupportsNamedParameters">
            <summary>
            Gets a value indicating whether SQL parameters are named.
            </summary>
        </member>
        <member name="T:MicroLite.Characters.SqlServerCeCharacters">
            <summary>
            The implementation of <see cref="T:MicroLite.Characters.SqlCharacters"/> for SQL Server Compact Edition.
            </summary>
        </member>
        <member name="F:MicroLite.Characters.SqlServerCeCharacters.Instance">
            <summary>
            The single instance of <see cref="T:MicroLite.Characters.SqlCharacters"/> for SQL Server Compact Edition.
            </summary>
        </member>
        <member name="M:MicroLite.Characters.SqlServerCeCharacters.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:MicroLite.Characters.SqlServerCeCharacters"/> class from being created.
            </summary>
        </member>
        <member name="P:MicroLite.Characters.SqlServerCeCharacters.LeftDelimiter">
            <summary>
            Gets the left delimiter character.
            </summary>
        </member>
        <member name="P:MicroLite.Characters.SqlServerCeCharacters.RightDelimiter">
            <summary>
            Gets the right delimiter character.
            </summary>
        </member>
        <member name="P:MicroLite.Characters.SqlServerCeCharacters.SqlParameter">
            <summary>
            Gets the SQL parameter.
            </summary>
        </member>
        <member name="P:MicroLite.Characters.SqlServerCeCharacters.SupportsNamedParameters">
            <summary>
            Gets a value indicating whether SQL parameters are named.
            </summary>
        </member>
        <member name="T:MicroLite.Clauses">
            <summary>
            An enumeration which represents the various clauses in a SQL Command.
            </summary>
        </member>
        <member name="F:MicroLite.Clauses.Select">
            <summary>
            The select clause.
            </summary>
        </member>
        <member name="F:MicroLite.Clauses.From">
            <summary>
            The from clause.
            </summary>
        </member>
        <member name="F:MicroLite.Clauses.Where">
            <summary>
            The where clause.
            </summary>
        </member>
        <member name="F:MicroLite.Clauses.OrderBy">
            <summary>
            The order by clause.
            </summary>
        </member>
        <member name="F:MicroLite.Clauses.GroupBy">
            <summary>
            The group by clause.
            </summary>
        </member>
        <member name="T:MicroLite.Collections.StackCollection`1">
            <summary>
            A <see cref="T:System.Collections.ObjectModel.Collection`1"/> which imitates a stack whilst keeping the usual Add method.
            </summary>
            <typeparam name="T">The type contained in the collection</typeparam>
        </member>
        <member name="M:MicroLite.Collections.StackCollection`1.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Collections.StackCollection`1"/> class.
            </summary>
        </member>
        <member name="M:MicroLite.Collections.StackCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1" /> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
        </member>
        <member name="T:MicroLite.Configuration.ConfigurationException">
            <summary>
            A <see cref="T:MicroLite.MicroLiteException"/> which is thrown for configuration exceptions.
            </summary>
        </member>
        <member name="T:MicroLite.MicroLiteException">
            <summary>
            The base exception thrown by the MicroLite ORM framework.
            </summary>
            <remarks>
            This exception will be thrown for exceptions encountered by the MicroLite ORM framework
            or to wrap any exceptions thrown by .net framework classes to allow for consistent error handling.
            </remarks>
        </member>
        <member name="M:MicroLite.MicroLiteException.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.MicroLiteException"/> class.
            </summary>
        </member>
        <member name="M:MicroLite.MicroLiteException.#ctor(System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.MicroLiteException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:MicroLite.MicroLiteException.#ctor(System.String,System.Exception)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.MicroLiteException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:MicroLite.MicroLiteException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.MicroLiteException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="M:MicroLite.Configuration.ConfigurationException.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Configuration.ConfigurationException"/> class.
            </summary>
        </member>
        <member name="M:MicroLite.Configuration.ConfigurationException.#ctor(System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Configuration.ConfigurationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:MicroLite.Configuration.ConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Configuration.ConfigurationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:MicroLite.Configuration.ConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Configuration.ConfigurationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:MicroLite.Configuration.ConfigurationExtensions">
            <summary>
            Extension methods for IConfigureExtensions.
            </summary>
        </member>
        <member name="M:MicroLite.Configuration.ConfigurationExtensions.ForFirebirdConnection(MicroLite.Configuration.IConfigureConnection,System.String)">
            <summary>
            Configures a Firebird connection using the connection string with the specified name
            in the connection strings section of the app/web config.
            </summary>
            <param name="configureConnection">The interface to configure a connection.</param>
            <param name="connectionName">The name of the connection string in the app/web config.</param>
            <returns>The next step in the fluent configuration.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if any argument is null.</exception>
            <exception cref="T:MicroLite.Configuration.ConfigurationException">Thrown if the connection is not found in the app config.</exception>
        </member>
        <member name="M:MicroLite.Configuration.ConfigurationExtensions.ForFirebirdConnection(MicroLite.Configuration.IConfigureConnection,System.String,System.String,System.String)">
            <summary>
            Configures a Firebird connection using the specified connection name,
            connection string string and provider name.
            </summary>
            <param name="configureConnection">The interface to configure a connection.</param>
            <param name="connectionName">The name for the connection.</param>
            <param name="connectionString">The connection string.</param>
            <param name="providerName">The name of the provider.</param>
            <returns>The next step in the fluent configuration.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if any argument is null.</exception>
        </member>
        <member name="M:MicroLite.Configuration.ConfigurationExtensions.ForMsSql2005Connection(MicroLite.Configuration.IConfigureConnection,System.String)">
            <summary>
            Configures an MS SQL 2005 (or later) connection using the connection string with the specified name
            in the connection strings section of the app/web config.
            </summary>
            <param name="configureConnection">The interface to configure a connection.</param>
            <param name="connectionName">The name of the connection string in the app/web config.</param>
            <returns>The next step in the fluent configuration.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if any argument is null.</exception>
            <exception cref="T:MicroLite.Configuration.ConfigurationException">Thrown if the connection is not found in the app config.</exception>
        </member>
        <member name="M:MicroLite.Configuration.ConfigurationExtensions.ForMsSql2005Connection(MicroLite.Configuration.IConfigureConnection,System.String,System.String,System.String)">
            <summary>
            Configures an MS SQL 2005 (or later) connection using the specified connection name,
            connection string string and provider name.
            </summary>
            <param name="configureConnection">The interface to configure a connection.</param>
            <param name="connectionName">The name for the connection.</param>
            <param name="connectionString">The connection string.</param>
            <param name="providerName">The name of the provider.</param>
            <returns>The next step in the fluent configuration.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if any argument is null.</exception>
        </member>
        <member name="M:MicroLite.Configuration.ConfigurationExtensions.ForMsSql2012Connection(MicroLite.Configuration.IConfigureConnection,System.String)">
            <summary>
            Configures an MS SQL 2012 (or later) connection using the connection string with the specified name
            in the connection strings section of the app/web config.
            </summary>
            <param name="configureConnection">The interface to configure a connection.</param>
            <param name="connectionName">The name of the connection string in the app/web config.</param>
            <returns>The next step in the fluent configuration.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if any argument is null.</exception>
            <exception cref="T:MicroLite.Configuration.ConfigurationException">Thrown if the connection is not found in the app config.</exception>
        </member>
        <member name="M:MicroLite.Configuration.ConfigurationExtensions.ForMsSql2012Connection(MicroLite.Configuration.IConfigureConnection,System.String,System.String,System.String)">
            <summary>
            Configures an MS SQL 2012 (or later) connection using the specified connection name,
            connection string string and provider name.
            </summary>
            <param name="configureConnection">The interface to configure a connection.</param>
            <param name="connectionName">The name for the connection.</param>
            <param name="connectionString">The connection string.</param>
            <param name="providerName">The name of the provider.</param>
            <returns>The next step in the fluent configuration.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if any argument is null.</exception>
        </member>
        <member name="M:MicroLite.Configuration.ConfigurationExtensions.ForMySqlConnection(MicroLite.Configuration.IConfigureConnection,System.String)">
            <summary>
            Configures a MySql connection using the connection string with the specified name
            in the connection strings section of the app/web config.
            </summary>
            <param name="configureConnection">The interface to configure a connection.</param>
            <param name="connectionName">The name of the connection string in the app/web config.</param>
            <returns>The next step in the fluent configuration.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if any argument is null.</exception>
            <exception cref="T:MicroLite.Configuration.ConfigurationException">Thrown if the connection is not found in the app config.</exception>
        </member>
        <member name="M:MicroLite.Configuration.ConfigurationExtensions.ForMySqlConnection(MicroLite.Configuration.IConfigureConnection,System.String,System.String,System.String)">
            <summary>
            Configures a MySql connection using the specified connection name,
            connection string string and provider name.
            </summary>
            <param name="configureConnection">The interface to configure a connection.</param>
            <param name="connectionName">The name for the connection.</param>
            <param name="connectionString">The connection string.</param>
            <param name="providerName">The name of the provider.</param>
            <returns>The next step in the fluent configuration.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if any argument is null.</exception>
        </member>
        <member name="M:MicroLite.Configuration.ConfigurationExtensions.ForPostgreSqlConnection(MicroLite.Configuration.IConfigureConnection,System.String)">
            <summary>
            Configures a PostgreSql connection using the connection string with the specified name
            in the connection strings section of the app/web config.
            </summary>
            <param name="configureConnection">The interface to configure a connection.</param>
            <param name="connectionName">The name of the connection string in the app/web config.</param>
            <returns>The next step in the fluent configuration.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if any argument is null.</exception>
            <exception cref="T:MicroLite.Configuration.ConfigurationException">Thrown if the connection is not found in the app config.</exception>
        </member>
        <member name="M:MicroLite.Configuration.ConfigurationExtensions.ForPostgreSqlConnection(MicroLite.Configuration.IConfigureConnection,System.String,System.String,System.String)">
            <summary>
            Configures a PostgreSql connection using the specified connection name,
            connection string string and provider name.
            </summary>
            <param name="configureConnection">The interface to configure a connection.</param>
            <param name="connectionName">The name for the connection.</param>
            <param name="connectionString">The connection string.</param>
            <param name="providerName">The name of the provider.</param>
            <returns>The next step in the fluent configuration.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if any argument is null.</exception>
        </member>
        <member name="M:MicroLite.Configuration.ConfigurationExtensions.ForSQLiteConnection(MicroLite.Configuration.IConfigureConnection,System.String)">
            <summary>
            Configures an SQLite connection using the connection string with the specified name
            in the connection strings section of the app/web config.
            </summary>
            <param name="configureConnection">The interface to configure a connection.</param>
            <param name="connectionName">The name of the connection string in the app/web config.</param>
            <returns>The next step in the fluent configuration.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if any argument is null.</exception>
            <exception cref="T:MicroLite.Configuration.ConfigurationException">Thrown if the connection is not found in the app config.</exception>
        </member>
        <member name="M:MicroLite.Configuration.ConfigurationExtensions.ForSQLiteConnection(MicroLite.Configuration.IConfigureConnection,System.String,System.String,System.String)">
            <summary>
            Configures an SQLite connection using the specified connection name,
            connection string string and provider name.
            </summary>
            <param name="configureConnection">The interface to configure a connection.</param>
            <param name="connectionName">The name for the connection.</param>
            <param name="connectionString">The connection string.</param>
            <param name="providerName">The name of the provider.</param>
            <returns>The next step in the fluent configuration.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if any argument is null.</exception>
        </member>
        <member name="M:MicroLite.Configuration.ConfigurationExtensions.ForSqlServerCeConnection(MicroLite.Configuration.IConfigureConnection,System.String)">
            <summary>
            Configures a SQL Server Compact Edition connection using the connection string with the specified name
            in the connection strings section of the app/web config.
            </summary>
            <param name="configureConnection">The interface to configure a connection.</param>
            <param name="connectionName">The name of the connection string in the app/web config.</param>
            <returns>The next step in the fluent configuration.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if any argument is null.</exception>
            <exception cref="T:MicroLite.Configuration.ConfigurationException">Thrown if the connection is not found in the app config.</exception>
        </member>
        <member name="M:MicroLite.Configuration.ConfigurationExtensions.ForSqlServerCeConnection(MicroLite.Configuration.IConfigureConnection,System.String,System.String,System.String)">
            <summary>
            Configures a SQL Server Compact Edition connection using the specified connection name,
            connection string string and provider name.
            </summary>
            <param name="configureConnection">The interface to configure a connection.</param>
            <param name="connectionName">The name for the connection.</param>
            <param name="connectionString">The connection string.</param>
            <param name="providerName">The name of the provider.</param>
            <returns>The next step in the fluent configuration.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if any argument is null.</exception>
        </member>
        <member name="M:MicroLite.Configuration.ConfigurationExtensions.WithAttributeBasedMapping(MicroLite.Configuration.IConfigureExtensions)">
            <summary>
            Configures the MicroLite ORM Framework to use attribute based mapping instead of the default convention based mapping.
            </summary>
            <param name="configureExtensions">The interface to configure extensions.</param>
            <returns>The interface which provides the extension points.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if any argument is null.</exception>
        </member>
        <member name="M:MicroLite.Configuration.ConfigurationExtensions.WithConventionBasedMapping(MicroLite.Configuration.IConfigureExtensions,MicroLite.Mapping.ConventionMappingSettings)">
            <summary>
            Configures the MicroLite ORM Framework to use custom convention settings for the default convention based mapping.
            </summary>
            <param name="configureExtensions">The interface to configure extensions.</param>
            <param name="settings">The settings for the convention mapping.</param>
            <returns>The interface which provides the extension points.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if any argument is null.</exception>
        </member>
        <member name="T:MicroLite.Configuration.Configure">
            <summary>
            The class used to configure the MicroLite ORM framework.
            </summary>
        </member>
        <member name="M:MicroLite.Configuration.Configure.Extensions">
            <summary>
            Begins the process of specifying the extensions which should be used by MicroLite ORM.
            </summary>
            <returns>The interface which provides the extension points.</returns>
            <remarks>Extensions should be configured before configuring any connections.</remarks>
            <example>
            Extensions can be added in any order although it is advised to add the logging extension first if you are using one
            so that other extensions can write to the log.
            <code>
            Configure
                .Extensions()
                .WithLog4Net() // To use log4net, install the MicroLite.Logging.Log4Net package (there is also an NLog package).
                .WithMvc() // To use the MVC extensions, install the MicroLite.Extensions.Mvc package.
                .WithWebApi(); // To use the WebApi extensions, install the MicroLite.Extensions.WebApi package.
            </code>
            </example>
        </member>
        <member name="M:MicroLite.Configuration.Configure.Fluently">
            <summary>
            Begins the configuration process using the fluent API.
            </summary>
            <returns>The next step in the fluent configuration.</returns>
            <example>
            <code>
            var sessionFactory = Configure
                .Fluently()
                .ForMsSql2005Connection("TestDB") // or any other supported SQL connection.
                .CreateSessionFactory();
            </code>
            </example>
        </member>
        <member name="P:MicroLite.Configuration.Configure.OnSessionFactoryCreated">
            <summary>
            Gets or sets a function which will be called when a session factory is created.
            </summary>
            <remarks>
            This is null by default, but if set it will be called when a session factory has been created.
            - Input is the ISessionFactory which has been created before it is added to Configure.SessionFactories.
            - Output is added to Configure.SessionFactories.
            The purpose of the method is to allow the session factory to be wrapped for profiling.
            </remarks>
        </member>
        <member name="P:MicroLite.Configuration.Configure.SessionFactories">
            <summary>
            Gets the collection of session factories which have created by the configuration.
            </summary>
        </member>
        <member name="T:MicroLite.Configuration.ConfigureExtensions">
            <summary>
            The class used to configure extensions to the MicroLite ORM framework.
            </summary>
        </member>
        <member name="T:MicroLite.Configuration.IConfigureExtensions">
            <summary>
            The interface which specifies the options for configuring extensions to the MicroLite ORM framework.
            </summary>
        </member>
        <member name="M:MicroLite.Configuration.IConfigureExtensions.SetLogResolver(System.Func{System.Type,MicroLite.Logging.ILog})">
            <summary>
            Sets the function which can be called by MicroLite to resolve the <see cref="T:MicroLite.Logging.ILog"/> to use.
            </summary>
            <param name="logResolver">The function to resolve an ILog.</param>
        </member>
        <member name="M:MicroLite.Configuration.IConfigureExtensions.SetMappingConvention(MicroLite.Mapping.IMappingConvention)">
            <summary>
            Specifies the mapping convention which should be used by MicroLite ORM to map classes to tables.
            </summary>
            <param name="mappingConvention">The mapping convention to use.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if mappingConvention is null.</exception>
        </member>
        <member name="T:MicroLite.Configuration.FluentConfiguration">
            <summary>
            The class used to configure the MicroLite ORM framework using the fluent API.
            </summary>
        </member>
        <member name="T:MicroLite.Configuration.IConfigureConnection">
            <summary>
            The interface which specifies the options for configuring the connection in the fluent configuration
            of the MicroLite ORM framework.
            </summary>
        </member>
        <member name="M:MicroLite.Configuration.IConfigureConnection.ForConnection(System.String,MicroLite.Dialect.ISqlDialect,MicroLite.Driver.IDbDriver)">
            <summary>
            Specifies the name of the connection and the ISqlDialect and IDbDriver to use for the connection.
            </summary>
            <param name="connectionName">The name of the connection string in the app config.</param>
            <param name="sqlDialect">The sql dialect to use for the connection.</param>
            <param name="dbDriver">The db driver to use for the connection.</param>
            <returns>The next step in the fluent configuration.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if any argument is null.</exception>
            <exception cref="T:MicroLite.Configuration.ConfigurationException">Thrown if the connection is not found in the app config.</exception>
            <remarks>This method should not be called by user code, rather it is the extension point used by the custom configuration extension method for a supported database type.</remarks>
        </member>
        <member name="M:MicroLite.Configuration.IConfigureConnection.ForConnection(System.String,System.String,System.String,MicroLite.Dialect.ISqlDialect,MicroLite.Driver.IDbDriver)">
            <summary>
            Specifies the name of the connection, the connection string, the provider name and the ISqlDialect
            and IDbDriver to use for the connection.
            </summary>
            <param name="connectionName">The name for the connection.</param>
            <param name="connectionString">The connection string.</param>
            <param name="providerName">The name of the provider.</param>
            <param name="sqlDialect">The sql dialect to use for the connection.</param>
            <param name="dbDriver">The db driver to use for the connection.</param>
            <returns>The next step in the fluent configuration.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if any argument is null.</exception>
            <remarks>This method should not be called by user code, rather it is the extension point used by the custom configuration extension method for a supported database type.</remarks>
        </member>
        <member name="T:MicroLite.Configuration.ICreateSessionFactory">
            <summary>
            The interface which specifies the creation of the <see cref="T:MicroLite.ISessionFactory"/> in the fluent configuration
            of the MicroLite ORM framework.
            </summary>
        </member>
        <member name="M:MicroLite.Configuration.ICreateSessionFactory.CreateSessionFactory">
            <summary>
            Creates the session factory for the configured connection.
            </summary>
            <returns>The session factory for the specified connection.</returns>
            <remarks>
            If set, Configure.OnSessionFactoryCreated will be called after the session factory is created.
            The session factory will also be added to the SessionFactories collection.
            </remarks>
        </member>
        <member name="T:MicroLite.ConnectionScope">
            <summary>
            An enumeration which defines when a connection used by MicroLite is opened and closed.
            </summary>
        </member>
        <member name="F:MicroLite.ConnectionScope.PerTransaction">
            <summary>
            The connection should be opened when a transaction is started and closed when the transaction is completed (default).
            </summary>
            <remarks>This is the default behaviour in 5.0 and the only available behaviour prior to 5.0.</remarks>
        </member>
        <member name="F:MicroLite.ConnectionScope.PerSession">
            <summary>
            The connection should be opened when a session is created and and closed when the session is disposed.
            </summary>
            <remarks>
            Use this option with caution, it exists mostly for use where opening a connection is expensive
            and multiple transactions are to be used within a single session,
            or for SQLite in memory databases which only persist data whilst a connection exists.
            </remarks>
        </member>
        <member name="T:MicroLite.Core.AsyncReadOnlySession">
            <summary>
            The default implementation of <see cref="T:MicroLite.IAsyncReadOnlySession"/>.
            </summary>
        </member>
        <member name="T:MicroLite.Core.SessionBase">
            <summary>
            The base class for a session.
            </summary>
        </member>
        <member name="T:MicroLite.Core.ISessionBase">
            <summary>
            An abstraction for the session base which de-couples the dependency for the Transaction class.
            </summary>
        </member>
        <member name="M:MicroLite.Core.ISessionBase.TransactionCompleted">
            <summary>
            Informs the session that the Transaction has been completed.
            </summary>
        </member>
        <member name="P:MicroLite.Core.ISessionBase.Connection">
            <summary>
            Gets the connection.
            </summary>
        </member>
        <member name="T:MicroLite.IAsyncReadOnlySession">
            <summary>
            The interface which provides the asynchronous read methods to map objects to database records.
            </summary>
        </member>
        <member name="M:MicroLite.IAsyncReadOnlySession.BeginTransaction">
             <summary>
             Begins a transaction using <see cref="T:System.Data.IsolationLevel"/>.ReadCommitted.
             </summary>
             <returns>An <see cref="T:MicroLite.ITransaction"/> with the default isolation level of the connection.</returns>
             <remarks>It is a good idea to perform all insert/update/delete actions inside a transaction.</remarks>
             <example>
             <code>
             using (var session = sessionFactory.OpenAsyncReadOnlySession()) // or sessionFactory.OpenAsyncSession()
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     // perform actions against ISession.
                     // ...
            
                     transaction.Commit();
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:MicroLite.IAsyncReadOnlySession.BeginTransaction(System.Data.IsolationLevel)">
             <summary>
             Begins the transaction with the specified <see cref="T:System.Data.IsolationLevel"/>.
             </summary>
             <param name="isolationLevel">The isolation level to use for the transaction.</param>
             <returns>An <see cref="T:MicroLite.ITransaction"/> with the specified <see cref="T:System.Data.IsolationLevel"/>.</returns>
             <remarks>It is a good idea to perform all insert/update/delete actions inside a transaction.</remarks>
             <example>
             <code>
             using (var session = sessionFactory.OpenAsyncReadOnlySession()) // or sessionFactory.OpenAsyncSession()
             {
                 // This overload allows us to specify a specific IsolationLevel.
                 using (var transaction = session.BeginTransaction(IsolationLevel.ReadCommitted))
                 {
                     // perform actions against ISession.
                     // ...
            
                     try
                     {
                         transaction.Commit();
                     }
                     catch (Exception exception)
                     {
                         transaction.Rollback();
                         // Log or throw the exception.
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:MicroLite.IAsyncReadOnlySession.FetchAsync``1(MicroLite.SqlQuery)">
             <summary>
             Executes the specified SQL query and returns the matching objects in a list.
             </summary>
             <typeparam name="T">The type of object the query relates to.</typeparam>
             <param name="sqlQuery">The SQL query to execute.</param>
             <returns>A task representing the asynchronous operation.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified SqlQuery is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the query.</exception>
             <example>
             <code>
             using (var session = sessionFactory.OpenAsyncReadOnlySession()) // or sessionFactory.OpenAsyncSession()
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     var query = new SqlQuery("SELECT * FROM Invoices WHERE CustomerId = @p0", 1324);
            
                     var invoices = await session.FetchAsync&lt;Invoice&gt;(query);
            
                     transaction.Commit();
                 }
             }
             </code>
             </example>
             <remarks>Invokes FetchAsync&lt;T&gt;(SqlQuery, CancellationToken) with CancellationToken.None.</remarks>
        </member>
        <member name="M:MicroLite.IAsyncReadOnlySession.FetchAsync``1(MicroLite.SqlQuery,System.Threading.CancellationToken)">
             <summary>
             Executes the specified SQL query and returns the matching objects in a list.
             This method propagates a notification that operations should be cancelled.
             </summary>
             <typeparam name="T">The type of object the query relates to.</typeparam>
             <param name="sqlQuery">The SQL query to execute.</param>
             <param name="cancellationToken">The token to monitor for cancellation requests.</param>
             <returns>A task representing the asynchronous operation.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified SqlQuery is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the query.</exception>
             <example>
             <code>
             using (var session = sessionFactory.OpenAsyncReadOnlySession()) // or sessionFactory.OpenAsyncSession()
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     var query = new SqlQuery("SELECT * FROM Invoices WHERE CustomerId = @p0", 1324);
            
                     var invoices = await session.FetchAsync&lt;Invoice&gt;(query);
            
                     transaction.Commit();
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:MicroLite.IAsyncReadOnlySession.PagedAsync``1(MicroLite.SqlQuery,MicroLite.PagingOptions)">
             <summary>
             Pages the specified SQL query and returns an <see cref="T:MicroLite.PagedResult`1"/> containing the desired results.
             </summary>
             <typeparam name="T">The type of object the query relates to.</typeparam>
             <param name="sqlQuery">The SQL query to page before executing.</param>
             <param name="pagingOptions">The <see cref="T:MicroLite.PagingOptions"/>.</param>
             <returns>A task representing the asynchronous operation.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified SqlQuery is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the query.</exception>
             <example>
             <code>
             using (var session = sessionFactory.OpenAsyncReadOnlySession()) // or sessionFactory.OpenAsyncSession()
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     var query = new SqlQuery("SELECT * FROM Customers WHERE LastName = @p0", "Smith");
            
                     var customers = await session.PagedAsync&lt;Customer&gt;(query, PagingOptions.ForPage(page: 1, resultsPerPage: 25));
            
                     transaction.Commit();
                 }
             }
             </code>
             </example>
             <remarks>Invokes PagedAsync&lt;T&gt;(SqlQuery, PagingOptions, CancellationToken) with CancellationToken.None.</remarks>
        </member>
        <member name="M:MicroLite.IAsyncReadOnlySession.PagedAsync``1(MicroLite.SqlQuery,MicroLite.PagingOptions,System.Threading.CancellationToken)">
             <summary>
             Pages the specified SQL query and returns an <see cref="T:MicroLite.PagedResult`1"/> containing the desired results.
             This method propagates a notification that operations should be cancelled.
             </summary>
             <typeparam name="T">The type of object the query relates to.</typeparam>
             <param name="sqlQuery">The SQL query to page before executing.</param>
             <param name="pagingOptions">The <see cref="T:MicroLite.PagingOptions"/>.</param>
             <param name="cancellationToken">The token to monitor for cancellation requests.</param>
             <returns>A task representing the asynchronous operation.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified SqlQuery is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the query.</exception>
             <example>
             <code>
             using (var session = sessionFactory.OpenAsyncReadOnlySession()) // or sessionFactory.OpenAsyncSession()
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     var query = new SqlQuery("SELECT * FROM Customers WHERE LastName = @p0", "Smith");
            
                     var customers = await session.PagedAsync&lt;Customer&gt;(query, PagingOptions.ForPage(page: 1, resultsPerPage: 25));
            
                     transaction.Commit();
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:MicroLite.IAsyncReadOnlySession.SingleAsync``1(System.Object)">
             <summary>
             Returns the instance of the specified type which corresponds to the row with the specified identifier
             in the mapped table, or null if the identifier values does not exist in the table.
             </summary>
             <typeparam name="T">The type of object.</typeparam>
             <param name="identifier">The record identifier.</param>
             <returns>A task representing the asynchronous operation.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified instance is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the query.</exception>
             <example>
             <code>
             using (var session = sessionFactory.OpenAsyncReadOnlySession()) // or sessionFactory.OpenAsyncSession()
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     var customer = await session.SingleAsync&lt;Customer&gt;(17867);
            
                     transaction.Commit();
                 }
             }
             </code>
             </example>
             <remarks>Invokes SingleAsync&lt;T&gt;(object, CancellationToken) with CancellationToken.None.</remarks>
        </member>
        <member name="M:MicroLite.IAsyncReadOnlySession.SingleAsync``1(System.Object,System.Threading.CancellationToken)">
             <summary>
             Returns the instance of the specified type which corresponds to the row with the specified identifier
             in the mapped table, or null if the identifier values does not exist in the table.
             This method propagates a notification that operations should be cancelled.
             </summary>
             <typeparam name="T">The type of object.</typeparam>
             <param name="identifier">The record identifier.</param>
             <param name="cancellationToken">The token to monitor for cancellation requests.</param>
             <returns>A task representing the asynchronous operation.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified instance is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the query.</exception>
             <example>
             <code>
             using (var session = sessionFactory.OpenAsyncReadOnlySession()) // or sessionFactory.OpenAsyncSession()
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     var customer = await session.SingleAsync&lt;Customer&gt;(17867);
            
                     transaction.Commit();
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:MicroLite.IAsyncReadOnlySession.SingleAsync``1(MicroLite.SqlQuery)">
             <summary>
             Returns a single instance based upon the specified SQL query, or null if no result is returned.
             </summary>
             <typeparam name="T">The type of object.</typeparam>
             <param name="sqlQuery">The SQL query to execute.</param>
             <returns>A task representing the asynchronous operation.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified instance is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the query.</exception>
             <example>
             <code>
             using (var session = sessionFactory.OpenAsyncReadOnlySession()) // or sessionFactory.OpenAsyncSession()
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     var query = new SqlQuery("SELECT * FROM Customers WHERE EmailAddress = @p0", "fred.flintstone@bedrock.com");
            
                     // This overload is useful to retrieve a single object based upon a unique value which isn't its identifier.
                     var customer = await session.SingleAsync&lt;Customer&gt;(query);
            
                     transaction.Commit();
                 }
             }
             </code>
             </example>
             <remarks>Invokes SingleAsync&lt;T&gt;(SqlQuery, CancellationToken) with CancellationToken.None.</remarks>
        </member>
        <member name="M:MicroLite.IAsyncReadOnlySession.SingleAsync``1(MicroLite.SqlQuery,System.Threading.CancellationToken)">
             <summary>
             Returns a single instance based upon the specified SQL query, or null if no result is returned.
             This method propagates a notification that operations should be cancelled.
             </summary>
             <typeparam name="T">The type of object.</typeparam>
             <param name="sqlQuery">The SQL query to execute.</param>
             <param name="cancellationToken">The token to monitor for cancellation requests.</param>
             <returns>A task representing the asynchronous operation.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified instance is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the query.</exception>
             <example>
             <code>
             using (var session = sessionFactory.OpenAsyncReadOnlySession()) // or sessionFactory.OpenAsyncSession()
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     var query = new SqlQuery("SELECT * FROM Customers WHERE EmailAddress = @p0", "fred.flintstone@bedrock.com");
            
                     // This overload is useful to retrieve a single object based upon a unique value which isn't its identifier.
                     var customer = await session.SingleAsync&lt;Customer&gt;(query);
            
                     transaction.Commit();
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:MicroLite.IAsyncReadOnlySession.Advanced">
            <summary>
            Gets the advanced async session operations.
            </summary>
        </member>
        <member name="P:MicroLite.IAsyncReadOnlySession.CurrentTransaction">
            <summary>
            Gets the current transaction or null if one has not been started.
            </summary>
        </member>
        <member name="P:MicroLite.IAsyncReadOnlySession.Include">
            <summary>
            Gets the operations which allow additional objects to be queried in a single database call.
            </summary>
        </member>
        <member name="T:MicroLite.IIncludeSession">
            <summary>
            The interface which provides access to include operations.
            </summary>
            <remarks>
            These operations allow for batch included values and have been moved to a separate interface to avoid
            cluttering the ISession API.
            </remarks>
        </member>
        <member name="M:MicroLite.IIncludeSession.All``1">
             <summary>
             Includes all instances of the specified type.
             </summary>
             <typeparam name="T">The type of object.</typeparam>
             <returns>A pointer to the included instances of the specified type.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified SqlQuery is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the query.</exception>
             <example>
             <code>
             using (var session = sessionFactory.OpenSession())
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     // Tell the session to include all countries.
                     var includeCountries = session.Include.All&lt;Country&gt;();
            
                     // At this point, countries will point to an IIncludeMany&lt;Country&gt; which will have no values.
                     // You can call include for multiple things, they will all be loaded in a single database call once
                     // either ISession.Single, ISession.Fetch or ISession.Paged is called.
            
                     // Load the customer.
                     var customer = session.Single&lt;Customer&gt;(1792);
            
                     transaction.Commit();
            
                     // We can now acces the countries.
                     var countryOptions = includeCountries.Values;
                 }
             }
             </code>
             </example>
             <remarks>
             This will return an object for every row in the table,
             it should be used to retrieve un-filtered lookup lists (for example the list of countries on a shipping form).
             </remarks>
        </member>
        <member name="M:MicroLite.IIncludeSession.Many``1(MicroLite.SqlQuery)">
             <summary>
             Includes many instances based upon the specified SQL query.
             </summary>
             <typeparam name="T">The type of object.</typeparam>
             <param name="sqlQuery">The SQL query to execute.</param>
             <returns>A pointer to the included instances of the specified type.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified SqlQuery is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the query.</exception>
             <example>
             <code>
             using (var session = sessionFactory.OpenSession())
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     // Query to fetch the invoices for the customer.
                     var invoicesQuery = new SqlQuery("SELECT * FROM Invoices WHERE CustomerId = @p0", 1792);
            
                     // Tell the session to include the invoices.
                     var includeInvoices = session.Include.Many&lt;Invoice&gt;(invoicesQuery);
            
                     // At this point, invoices will point to an IIncludeMany&lt;Invoice&gt; which will have no values.
                     // You can call include for multiple things, they will all be loaded in a single database call once
                     // either ISession.Single, ISession.Fetch or ISession.Paged is called.
            
                     // Load the customer.
                     var customer = session.Single&lt;Customer&gt;(1792);
            
                     transaction.Commit();
            
                     // We can now acces the invoices.
                     var invoices = includeInvoices.Values;
            
                     foreach (var invoice in invoices.Values)
                     {
                         // ...
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:MicroLite.IIncludeSession.Scalar``1(MicroLite.SqlQuery)">
             <summary>
             Includes a single value based upon the specified SQL query.
             </summary>
             <typeparam name="T">The type of value to be returned.</typeparam>
             <param name="sqlQuery">The SQL query to execute.</param>
             <returns>A pointer to the included value of the specified type.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified SqlQuery is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the query.</exception>
             <example>
             <code>
             using (var session = sessionFactory.OpenSession())
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     // Query to count the invoices for the customer.
                     var invoicesCountQuery = new SqlQuery("SELECT COUNT(InvoiceId) AS InvoiceCount FROM Invoices WHERE CustomerId = @p0", 1792);
            
                     // Tell the session to include the invoices count.
                     var includeInvoicesCount = session.Include.Scalar&lt;int&gt;(invoicesQuery);
            
                     // At this point, invoices will point to an IInclude&lt;int&gt; which will have it's default value of 0.
                     // You can call include for multiple things, they will all be loaded in a single database call once
                     // either ISession.Single, ISession.Fetch or ISession.Paged is called.
            
                     // Load the customer.
                     var customer = session.Single&lt;Customer&gt;(1792);
            
                     transaction.Commit();
            
                     // We can now acces the invoices count for the customer.
                     if (includeInvoicesCount.Value &gt; 0)
                     {
                         ...
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:MicroLite.IIncludeSession.Single``1(System.Object)">
             <summary>
             Includes the instance of the specified type which corresponds to the row with the specified identifier
             in the mapped table.
             </summary>
             <typeparam name="T">The type of object.</typeparam>
             <param name="identifier">The record identifier.</param>
             <returns>A pointer to the included instance of the specified type.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified identifier is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the query.</exception>
             <example>
             <code>
             using (var session = sessionFactory.OpenSession())
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     // Tell the session to include the customer.
                     var includeCustomer = session.Include.Single&lt;Customer&gt;(3264);
            
                     // At this point, includeCustomer will point to an IInclude&lt;Customer&gt; which will have no value.
                     // You can call include for multiple things, they will all be loaded in a single database call once
                     // either ISession.Single, ISession.Fetch or ISession.Paged is called.
            
                     // Query to fetch the invoices for the customer.
                     var invoicesQuery = new SqlQuery("SELECT * FROM Invoices WHERE CustomerId = @p0", 3264);
            
                     // Load the invoices.
                     var invoices = session.Fetch&lt;Invoice&gt;(query);
            
                     transaction.Commit();
            
                     // We can now acces the customer
                     Console.WriteLine(includeCustomer.Value.Name);
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:MicroLite.IIncludeSession.Single``1(MicroLite.SqlQuery)">
            <summary>
            Includes a single instance based upon the specified SQL query.
            </summary>
            <typeparam name="T">The type of object.</typeparam>
            <param name="sqlQuery">The SQL query to execute.</param>
            <returns>A pointer to the included instance of the specified type.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if the specified SqlQuery is null.</exception>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the query.</exception>
        </member>
        <member name="T:MicroLite.IAdvancedAsyncReadOnlySession">
            <summary>
            The interface which provides access to advanced read-only asynchronous session operations.
            </summary>
            <remarks>
            These operations allow for more advanced use and have been moved to a separate interface to avoid
            cluttering the IAsyncReadOnlySession API.
            </remarks>
        </member>
        <member name="M:MicroLite.IAdvancedAsyncReadOnlySession.ExecutePendingQueriesAsync">
            <summary>
            Asynchronously executes any pending queries which have been queued using the Include API.
            </summary>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>Invokes ExecutePendingQueriesAsync(CancellationToken) with CancellationToken.None.</remarks>
        </member>
        <member name="M:MicroLite.IAdvancedAsyncReadOnlySession.ExecutePendingQueriesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes any pending queries which have been queued using the Include API.
            This method propagates a notification that operations should be cancelled.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:MicroLite.Core.AsyncSession">
            <summary>
            The default implementation of <see cref="T:MicroLite.IAsyncSession"/>.
            </summary>
        </member>
        <member name="T:MicroLite.IAsyncSession">
            <summary>
            The interface which provides the asynchronous write methods to map objects to database records.
            </summary>
        </member>
        <member name="M:MicroLite.IAsyncSession.DeleteAsync(System.Object)">
             <summary>
             Asynchronously deletes the database record for the specified instance.
             </summary>
             <param name="instance">The instance to delete from the database.</param>
             <returns>A task representing the asynchronous operation.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified instance is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the delete command.</exception>
             <example>
             <code>
             bool deleted = false;
            
             using (var session = sessionFactory.OpenAsyncSession())
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     try
                     {
                         deleted = await session.DeleteAsync(customer);
            
                         transaction.Commit();
                     }
                     catch
                     {
                         deleted = false;
            
                         transaction.Rollback();
                         // Log or throw the exception.
                     }
                 }
             }
             </code>
             </example>
             <remarks>Invokes DeleteAsync(object, CancellationToken) with CancellationToken.None.</remarks>
        </member>
        <member name="M:MicroLite.IAsyncSession.DeleteAsync(System.Object,System.Threading.CancellationToken)">
             <summary>
             Asynchronously deletes the database record for the specified instance.
             This method propagates a notification that operations should be cancelled.
             </summary>
             <param name="instance">The instance to delete from the database.</param>
             <param name="cancellationToken">The token to monitor for cancellation requests.</param>
             <returns>A task representing the asynchronous operation.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified instance is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the delete command.</exception>
             <example>
             <code>
             bool deleted = false;
            
             using (var session = sessionFactory.OpenAsyncSession())
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     try
                     {
                         deleted = await session.DeleteAsync(customer);
            
                         transaction.Commit();
                     }
                     catch
                     {
                         deleted = false;
            
                         transaction.Rollback();
                         // Log or throw the exception.
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:MicroLite.IAsyncSession.InsertAsync(System.Object)">
             <summary>
             Asynchronously inserts a new database record for the specified instance.
             </summary>
             <param name="instance">The instance to persist the values for.</param>
             <returns>A task representing the asynchronous operation.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified instance is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the insert command.</exception>
             <example>
             <code>
             using (var session = sessionFactory.OpenAsyncSession())
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     await session.InsertAsync(customer);
            
                     transaction.Commit();
                 }
             }
             </code>
             </example>
             <remarks>Invokes InsertAsync(object, CancellationToken) with CancellationToken.None.</remarks>
        </member>
        <member name="M:MicroLite.IAsyncSession.InsertAsync(System.Object,System.Threading.CancellationToken)">
             <summary>
             Asynchronously inserts a new database record for the specified instance.
             This method propagates a notification that operations should be cancelled.
             </summary>
             <param name="instance">The instance to persist the values for.</param>
             <param name="cancellationToken">The token to monitor for cancellation requests.</param>
             <returns>A task representing the asynchronous operation.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified instance is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the insert command.</exception>
             <example>
             <code>
             using (var session = sessionFactory.OpenAsyncSession())
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     await session.InsertAsync(customer);
            
                     transaction.Commit();
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:MicroLite.IAsyncSession.UpdateAsync(System.Object)">
             <summary>
             Asynchronously updates the database record for the specified instance with the current property values.
             </summary>
             <param name="instance">The instance to persist the values for.</param>
             <returns>A task representing the asynchronous operation.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified instance is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the update command.</exception>
             <example>
             <code>
             using (var session = sessionFactory.OpenAsyncSession())
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     await session.UpdateAsync(customer);
            
                     transaction.Commit();
                 }
             }
             </code>
             </example>
             <remarks>Invokes UpdateAsync(object, CancellationToken) with CancellationToken.None.</remarks>
        </member>
        <member name="M:MicroLite.IAsyncSession.UpdateAsync(System.Object,System.Threading.CancellationToken)">
             <summary>
             Asynchronously updates the database record for the specified instance with the current property values.
             This method propagates a notification that operations should be cancelled.
             </summary>
             <param name="instance">The instance to persist the values for.</param>
             <param name="cancellationToken">The token to monitor for cancellation requests.</param>
             <returns>A task representing the asynchronous operation.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified instance is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the update command.</exception>
             <example>
             <code>
             using (var session = sessionFactory.OpenAsyncSession())
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     await session.UpdateAsync(customer);
            
                     transaction.Commit();
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:MicroLite.IAsyncSession.Advanced">
            <summary>
            Gets the advanced session operations.
            </summary>
        </member>
        <member name="T:MicroLite.IAdvancedAsyncSession">
            <summary>
            The interface which provides access to advanced asynchronous session operations.
            </summary>
            <remarks>
            These operations allow for more advanced use and have been moved to a separate interface to avoid
            cluttering the IAsyncSession API.
            </remarks>
        </member>
        <member name="M:MicroLite.IAdvancedAsyncSession.DeleteAsync(System.Type,System.Object)">
             <summary>
             Asynchronously deletes the database record of the specified type with the specified identifier.
             </summary>
             <param name="type">The type to delete.</param>
             <param name="identifier">The identifier of the record to delete.</param>
             <returns>A task representing the asynchronous operation.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified type or identifier is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the delete command.</exception>
             <example>
             <code>
             using (var session = sessionFactory.OpenAsyncSession())
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     bool wasDeleted = await session.Advanced.DeleteAsync(type: typeof(Customer), identifier: 12823);
            
                     transaction.Commit();
                 }
             }
             </code>
             </example>
             <remarks>Invokes DeleteAsync(Type, object, CancellationToken) with CancellationToken.None.</remarks>
        </member>
        <member name="M:MicroLite.IAdvancedAsyncSession.DeleteAsync(System.Type,System.Object,System.Threading.CancellationToken)">
             <summary>
             Asynchronously deletes the database record of the specified type with the specified identifier.
             This method propagates a notification that operations should be cancelled.
             </summary>
             <param name="type">The type to delete.</param>
             <param name="identifier">The identifier of the record to delete.</param>
             <param name="cancellationToken">The token to monitor for cancellation requests.</param>
             <returns>A task representing the asynchronous operation.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified type or identifier is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the delete command.</exception>
             <example>
             <code>
             using (var session = sessionFactory.OpenAsyncSession())
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     bool wasDeleted = await session.Advanced.DeleteAsync(type: typeof(Customer), identifier: 12823);
            
                     transaction.Commit();
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:MicroLite.IAdvancedAsyncSession.ExecuteAsync(MicroLite.SqlQuery)">
             <summary>
             Asynchronously executes the specified SQL query and returns the number of rows affected.
             </summary>
             <param name="sqlQuery">The SQL query to execute.</param>
             <returns>A task representing the asynchronous operation.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified SqlQuery is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the command.</exception>
             <example>
             <code>
             using (var session = sessionFactory.OpenAsyncSession())
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     var query = new SqlQuery("UPDATE Customers SET Locked = @p0 WHERE Locked = @p1", false, true);
            
                     int unlockedRowCount = await session.Advanced.ExecuteAsync(query);
            
                     transaction.Commit();
                 }
             }
             </code>
             </example>
             <remarks>Invokes ExecuteAsync(SqlQuery, CancellationToken) with CancellationToken.None.</remarks>
        </member>
        <member name="M:MicroLite.IAdvancedAsyncSession.ExecuteAsync(MicroLite.SqlQuery,System.Threading.CancellationToken)">
             <summary>
             Asynchronously executes the specified SQL query and returns the number of rows affected.
             This method propagates a notification that operations should be cancelled.
             </summary>
             <param name="sqlQuery">The SQL query to execute.</param>
             <param name="cancellationToken">The token to monitor for cancellation requests.</param>
             <returns>A task representing the asynchronous operation.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified SqlQuery is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the command.</exception>
             <example>
             <code>
             using (var session = sessionFactory.OpenAsyncSession())
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     var query = new SqlQuery("UPDATE Customers SET Locked = @p0 WHERE Locked = @p1", false, true);
            
                     int unlockedRowCount = await session.Advanced.ExecuteAsync(query);
            
                     transaction.Commit();
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:MicroLite.IAdvancedAsyncSession.ExecuteScalarAsync``1(MicroLite.SqlQuery)">
             <summary>
             Asynchronously executes the specified SQL query as a scalar command.
             </summary>
             <typeparam name="T">The type of result to be returned.</typeparam>
             <param name="sqlQuery">The SQL query to execute.</param>
             <returns>A task representing the asynchronous operation.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified SqlQuery is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the command.</exception>
             <example>
             <code>
             using (var session = sessionFactory.OpenAsyncSession())
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     // Create a query which returns a single result.
                     var query = new SqlQuery("SELECT COUNT(CustomerId) FROM Customers");
            
                     int customerCount = await session.Advanced.ExecuteScalarAsync&lt;int&gt;(query);
            
                     transaction.Commit();
                 }
             }
             </code>
             </example>
             <remarks>Invokes ExecuteScalarAsync(SqlQuery, CancellationToken) with CancellationToken.None.</remarks>
        </member>
        <member name="M:MicroLite.IAdvancedAsyncSession.ExecuteScalarAsync``1(MicroLite.SqlQuery,System.Threading.CancellationToken)">
             <summary>
             Asynchronously executes the specified SQL query as a scalar command.
             This method propagates a notification that operations should be cancelled.
             </summary>
             <typeparam name="T">The type of result to be returned.</typeparam>
             <param name="sqlQuery">The SQL query to execute.</param>
             <param name="cancellationToken">The token to monitor for cancellation requests.</param>
             <returns>A task representing the asynchronous operation.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified SqlQuery is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the command.</exception>
             <example>
             <code>
             using (var session = sessionFactory.OpenAsyncSession())
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     // Create a query which returns a single result.
                     var query = new SqlQuery("SELECT COUNT(CustomerId) FROM Customers");
            
                     int customerCount = await session.Advanced.ExecuteScalarAsync&lt;int&gt;(query);
            
                     transaction.Commit();
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:MicroLite.IAdvancedAsyncSession.UpdateAsync(MicroLite.ObjectDelta)">
             <summary>
             Asynchronously performs a partial update on a table row based upon the values specified in the object delta.
             </summary>
             <param name="objectDelta">The object delta containing the changes to be applied.</param>
             <returns>A task representing the asynchronous operation.</returns>
             <example>
             <code>
             using (var session = sessionFactory.OpenAsyncSession())
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     // Create an ObjectDelta which only updates specific properties:
                     var objectDelta = new ObjectDelta(type: typeof(Customer), identifier: 12823);
                     objectDelta.AddChange(propertyName: "Locked", newValue: false); // Add 1 or more changes.
            
                     bool wasUpdated = await session.Advanced.UpdateAsync(objectDelta);
            
                     transaction.Commit();
                 }
             }
             </code>
             </example>
             <remarks>Invokes UpdateAsync(ObjectDelta, CancellationToken) with CancellationToken.None.</remarks>
        </member>
        <member name="M:MicroLite.IAdvancedAsyncSession.UpdateAsync(MicroLite.ObjectDelta,System.Threading.CancellationToken)">
             <summary>
             Asynchronously performs a partial update on a table row based upon the values specified in the object delta.
             This method propagates a notification that operations should be cancelled.
             </summary>
             <param name="objectDelta">The object delta containing the changes to be applied.</param>
             <param name="cancellationToken">The token to monitor for cancellation requests.</param>
             <returns>A task representing the asynchronous operation.</returns>
             <example>
             <code>
             using (var session = sessionFactory.OpenAsyncSession())
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     // Create an ObjectDelta which only updates specific properties:
                     var objectDelta = new ObjectDelta(type: typeof(Customer), identifier: 12823);
                     objectDelta.AddChange(propertyName: "Locked", newValue: false); // Add 1 or more changes.
            
                     bool wasUpdated = await session.Advanced.UpdateAsync(objectDelta);
            
                     transaction.Commit();
                 }
             }
             </code>
             </example>
        </member>
        <member name="T:MicroLite.Core.Include">
            <summary>
            The base class for include implementations.
            </summary>
        </member>
        <member name="M:MicroLite.Core.Include.BuildValue(System.Data.IDataReader)">
            <summary>
            Builds the included value from the results in the data reader.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> containing the results.</param>
        </member>
        <member name="M:MicroLite.Core.Include.BuildValueAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)">
            <summary>
            Builds the included value from the results in the data reader.
            </summary>
            <param name="reader">The <see cref="T:System.Data.Common.DbDataReader"/> containing the results.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="P:MicroLite.Core.Include.HasValue">
            <summary>
            Gets or sets a value indicating whether this include has a value.
            </summary>
        </member>
        <member name="T:MicroLite.Core.IncludeMany`1">
            <summary>
            The default implementation of <see cref="T:MicroLite.IIncludeMany`1"/>.
            </summary>
            <typeparam name="T">The type of object to be included.</typeparam>
        </member>
        <member name="T:MicroLite.IIncludeMany`1">
            <summary>
            The interface for including a multiple results.
            </summary>
            <typeparam name="T">The type of object to be included.</typeparam>
        </member>
        <member name="M:MicroLite.IIncludeMany`1.OnLoad(System.Action{MicroLite.IIncludeMany{`0}})">
            <summary>
            Called when the included value is loaded.
            </summary>
            <param name="action">The action to be invoked.</param>
        </member>
        <member name="P:MicroLite.IIncludeMany`1.HasValue">
            <summary>
            Gets a value indicating whether this include has a value.
            </summary>
        </member>
        <member name="P:MicroLite.IIncludeMany`1.Values">
            <summary>
            Gets the included values.
            </summary>
            <value>
            Values will be in one of the following states:
             - If the overall query has not been executed the value will be an empty collection.
             - If the query yielded no results, it will be an empty collection; otherwise it will contain the results of the query.
            </value>
        </member>
        <member name="T:MicroLite.Core.IncludeScalar`1">
            <summary>
            The default implementation of <see cref="T:MicroLite.IInclude`1"/> for scalar results.
            </summary>
            <typeparam name="T">The type of object to be included.</typeparam>
        </member>
        <member name="T:MicroLite.IInclude`1">
            <summary>
            The interface for including a single result.
            </summary>
            <typeparam name="T">The type of object to be included.</typeparam>
        </member>
        <member name="M:MicroLite.IInclude`1.OnLoad(System.Action{MicroLite.IInclude{`0}})">
            <summary>
            Called when the included value is loaded.
            </summary>
            <param name="action">The action to be invoked.</param>
        </member>
        <member name="P:MicroLite.IInclude`1.HasValue">
            <summary>
            Gets a value indicating whether this include has a value.
            </summary>
        </member>
        <member name="P:MicroLite.IInclude`1.Value">
            <summary>
            Gets the included value.
            </summary>
            <value>
            Value will be in one of the following states:
             - If the overall query has not been executed the value will be equal to its default value (null for reference types).
             - If the query yielded no results, it will be its default value; otherwise it will be the result of the query.
            </value>
        </member>
        <member name="T:MicroLite.Core.IncludeSingle`1">
            <summary>
            The default implementation of <see cref="T:MicroLite.IInclude`1"/> for mapped objects.
            </summary>
            <typeparam name="T">The type of object to be included.</typeparam>
        </member>
        <member name="T:MicroLite.Core.ReadOnlySession">
            <summary>
            The default implementation of <see cref="T:MicroLite.IReadOnlySession"/>.
            </summary>
        </member>
        <member name="T:MicroLite.IReadOnlySession">
            <summary>
            The interface which provides the read methods to map objects to database records.
            </summary>
        </member>
        <member name="M:MicroLite.IReadOnlySession.BeginTransaction">
             <summary>
             Begins a transaction using <see cref="T:System.Data.IsolationLevel"/>.ReadCommitted.
             </summary>
             <returns>An <see cref="T:MicroLite.ITransaction"/> with the default isolation level of the connection.</returns>
             <remarks>It is a good idea to perform all insert/update/delete actions inside a transaction.</remarks>
             <example>
             <code>
             using (var session = sessionFactory.OpenReadOnlySession()) // or sessionFactory.OpenSession()
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     // perform actions against ISession.
                     // ...
            
                     transaction.Commit();
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:MicroLite.IReadOnlySession.BeginTransaction(System.Data.IsolationLevel)">
             <summary>
             Begins the transaction with the specified <see cref="T:System.Data.IsolationLevel"/>.
             </summary>
             <param name="isolationLevel">The isolation level to use for the transaction.</param>
             <returns>An <see cref="T:MicroLite.ITransaction"/> with the specified <see cref="T:System.Data.IsolationLevel"/>.</returns>
             <remarks>It is a good idea to perform all insert/update/delete actions inside a transaction.</remarks>
             <example>
             <code>
             using (var session = sessionFactory.OpenReadOnlySession()) // or sessionFactory.OpenSession()
             {
                 // This overload allows us to specify a specific IsolationLevel.
                 using (var transaction = session.BeginTransaction(IsolationLevel.ReadCommitted))
                 {
                     // perform actions against ISession.
                     // ...
            
                     try
                     {
                         transaction.Commit();
                     }
                     catch (Exception exception)
                     {
                         transaction.Rollback();
                         // Log or throw the exception.
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:MicroLite.IReadOnlySession.Fetch``1(MicroLite.SqlQuery)">
             <summary>
             Executes the specified SQL query and returns the matching objects in a list.
             </summary>
             <typeparam name="T">The type of object the query relates to.</typeparam>
             <param name="sqlQuery">The SQL query to execute.</param>
             <returns>The objects that match the query in a list.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified SqlQuery is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the query.</exception>
             <example>
             <code>
             using (var session = sessionFactory.OpenReadOnlySession()) // or sessionFactory.OpenSession()
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     var query = new SqlQuery("SELECT * FROM Invoices WHERE CustomerId = @p0", 1324);
            
                     var invoices = session.Fetch&lt;Invoice&gt;(query);
            
                     transaction.Commit();
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:MicroLite.IReadOnlySession.Paged``1(MicroLite.SqlQuery,MicroLite.PagingOptions)">
             <summary>
             Pages the specified SQL query and returns an <see cref="T:MicroLite.PagedResult`1"/> containing the desired results.
             </summary>
             <typeparam name="T">The type of object the query relates to.</typeparam>
             <param name="sqlQuery">The SQL query to page before executing.</param>
             <param name="pagingOptions">The <see cref="T:MicroLite.PagingOptions"/>.</param>
             <returns>A <see cref="T:MicroLite.PagedResult`1"/> containing the desired results.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified SqlQuery is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the query.</exception>
             <example>
             <code>
             using (var session = sessionFactory.OpenReadOnlySession()) // or sessionFactory.OpenSession()
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     var query = new SqlQuery("SELECT * FROM Customers WHERE LastName = @p0", "Smith");
            
                     var customers = session.Paged&lt;Customer&gt;(query, PagingOptions.ForPage(page: 1, resultsPerPage: 25));
            
                     transaction.Commit();
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:MicroLite.IReadOnlySession.Single``1(System.Object)">
             <summary>
             Returns the instance of the specified type which corresponds to the row with the specified identifier
             in the mapped table, or null if the identifier values does not exist in the table.
             </summary>
             <typeparam name="T">The type of object.</typeparam>
             <param name="identifier">The record identifier.</param>
             <returns>An instance of the specified type or null if no matching record exists.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified instance is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the query.</exception>
             <example>
             <code>
             using (var session = sessionFactory.OpenReadOnlySession()) // or sessionFactory.OpenSession()
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     var customer = session.Single&lt;Customer&gt;(17867);
            
                     transaction.Commit();
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:MicroLite.IReadOnlySession.Single``1(MicroLite.SqlQuery)">
             <summary>
             Returns a single instance based upon the specified SQL query, or null if no result is returned.
             </summary>
             <typeparam name="T">The type of object.</typeparam>
             <param name="sqlQuery">The SQL query to execute.</param>
             <returns>An instance of the specified type or null if no matching record exists.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified instance is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the query.</exception>
             <example>
             <code>
             using (var session = sessionFactory.OpenReadOnlySession()) // or sessionFactory.OpenSession()
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     var query = new SqlQuery("SELECT * FROM Customers WHERE EmailAddress = @p0", "fred.flintstone@bedrock.com");
            
                     // This overload is useful to retrieve a single object based upon a unique value which isn't its identifier.
                     var customer = session.Single&lt;Customer&gt;(query);
            
                     transaction.Commit();
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:MicroLite.IReadOnlySession.Advanced">
            <summary>
            Gets the advanced session operations.
            </summary>
        </member>
        <member name="P:MicroLite.IReadOnlySession.CurrentTransaction">
            <summary>
            Gets the current transaction or null if one has not been started.
            </summary>
        </member>
        <member name="P:MicroLite.IReadOnlySession.Include">
            <summary>
            Gets the operations which allow additional objects to be queried in a single database call.
            </summary>
        </member>
        <member name="T:MicroLite.IAdvancedReadOnlySession">
            <summary>
            The interface which provides access to advanced read only session operations.
            </summary>
            <remarks>
            These operations allow for more advanced use and have been moved to a separate interface to avoid
            cluttering the IReadOnlySession API.
            </remarks>
        </member>
        <member name="M:MicroLite.IAdvancedReadOnlySession.ExecutePendingQueries">
            <summary>
            Executes any pending queries which have been queued using the Include API.
            </summary>
        </member>
        <member name="T:MicroLite.Core.Session">
            <summary>
            The default implementation of <see cref="T:MicroLite.ISession"/>.
            </summary>
        </member>
        <member name="T:MicroLite.ISession">
            <summary>
            The interface which provides the write methods to map objects to database records.
            </summary>
        </member>
        <member name="M:MicroLite.ISession.Delete(System.Object)">
             <summary>
             Deletes the database record for the specified instance.
             </summary>
             <param name="instance">The instance to delete from the database.</param>
             <returns>true if the object was deleted successfully; otherwise false.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified instance is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the delete command.</exception>
             <example>
             <code>
             bool deleted = false;
            
             using (var session = sessionFactory.OpenSession())
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     try
                     {
                         deleted = session.Delete(customer);
            
                         transaction.Commit();
                     }
                     catch
                     {
                         deleted = false;
            
                         transaction.Rollback();
                         // Log or throw the exception.
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:MicroLite.ISession.Insert(System.Object)">
             <summary>
             Inserts a new database record for the specified instance.
             </summary>
             <param name="instance">The instance to persist the values for.</param>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified instance is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the insert command.</exception>
             <example>
             <code>
             using (var session = sessionFactory.OpenSession())
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     session.Insert(customer);
            
                     transaction.Commit();
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:MicroLite.ISession.Update(System.Object)">
             <summary>
             Updates the database record for the specified instance with the current property values.
             </summary>
             <param name="instance">The instance to persist the values for.</param>
             <returns>true if the object was updated successfully; otherwise false.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified instance is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the update command.</exception>
             <example>
             <code>
             using (var session = sessionFactory.OpenSession())
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     session.Update(customer);
            
                     transaction.Commit();
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:MicroLite.ISession.Advanced">
            <summary>
            Gets the advanced session operations.
            </summary>
        </member>
        <member name="T:MicroLite.IAdvancedSession">
            <summary>
            The interface which provides access to advanced session operations.
            </summary>
            <remarks>
            These operations allow for more advanced use and have been moved to a separate interface to avoid
            cluttering the ISession API.
            </remarks>
        </member>
        <member name="M:MicroLite.IAdvancedSession.Delete(System.Type,System.Object)">
             <summary>
             Deletes the database record of the specified type with the specified identifier.
             </summary>
             <param name="type">The type to delete.</param>
             <param name="identifier">The identifier of the record to delete.</param>
             <returns>true if the object was deleted successfully; otherwise false.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified type or identifier is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the delete command.</exception>
             <example>
             <code>
             using (var session = sessionFactory.OpenSession())
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     bool wasDeleted = session.Advanced.Delete(type: typeof(Customer), identifier: 12823);
            
                     transaction.Commit();
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:MicroLite.IAdvancedSession.Execute(MicroLite.SqlQuery)">
             <summary>
             Executes the specified SQL query and returns the number of rows affected.
             </summary>
             <param name="sqlQuery">The SQL query to execute.</param>
             <returns>The number of rows affected by the SQL query.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified SqlQuery is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the command.</exception>
             <example>
             <code>
             using (var session = sessionFactory.OpenSession())
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     var query = new SqlQuery("UPDATE Customers SET Locked = @p0 WHERE Locked = @p1", false, true);
            
                     int unlockedRowCount = session.Advanced.Execute(query);
            
                     transaction.Commit();
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:MicroLite.IAdvancedSession.ExecuteScalar``1(MicroLite.SqlQuery)">
             <summary>
             Executes the specified SQL query as a scalar command.
             </summary>
             <typeparam name="T">The type of result to be returned.</typeparam>
             <param name="sqlQuery">The SQL query to execute.</param>
             <returns>The result of the scalar query (the first column in the first row returned).</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified SqlQuery is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the command.</exception>
             <example>
             <code>
             using (var session = sessionFactory.OpenSession())
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     // Create a query which returns a single result.
                     var query = new SqlQuery("SELECT COUNT(CustomerId) FROM Customers");
            
                     int customerCount = session.Advanced.ExecuteScalar&lt;int&gt;(query);
            
                     transaction.Commit();
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:MicroLite.IAdvancedSession.Update(MicroLite.ObjectDelta)">
             <summary>
             Performs a partial update on a table row based upon the values specified in the object delta.
             </summary>
             <param name="objectDelta">The object delta containing the changes to be applied.</param>
             <returns>true if the object was updated successfully; otherwise false.</returns>
             <example>
             <code>
             using (var session = sessionFactory.OpenSession())
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     // Create an ObjectDelta which only updates specific properties:
                     var objectDelta = new ObjectDelta(type: typeof(Customer), identifier: 12823);
                     objectDelta.AddChange(propertyName: "Locked", newValue: false); // Add 1 or more changes.
            
                     bool wasUpdated = session.Advanced.Update(objectDelta);
            
                     transaction.Commit();
                 }
             }
             </code>
             </example>
        </member>
        <member name="T:MicroLite.Core.SessionFactory">
            <summary>
            The default implementation of <see cref="T:MicroLite.ISessionFactory"/>.
            </summary>
        </member>
        <member name="T:MicroLite.ISessionFactory">
            <summary>
            The interface which defines the factory methods for creating MicroLite sessions.
            </summary>
        </member>
        <member name="M:MicroLite.ISessionFactory.OpenAsyncReadOnlySession">
            <summary>
            Opens a new asynchronous read-only session to the database using <see cref="T:MicroLite.ConnectionScope"/>.PerTransaction.
            </summary>
            <returns>A new asynchronous read-only database session.</returns>
        </member>
        <member name="M:MicroLite.ISessionFactory.OpenAsyncReadOnlySession(MicroLite.ConnectionScope)">
            <summary>
            Opens a new asynchronous read-only session to the database using the specified <see cref="T:MicroLite.ConnectionScope"/>.
            </summary>
            <param name="connectionScope">The connection scope to use for the session.</param>
            <returns>A new asynchronous read-only database session.</returns>
        </member>
        <member name="M:MicroLite.ISessionFactory.OpenAsyncSession">
            <summary>
            Opens a new asynchronous session to the database using <see cref="T:MicroLite.ConnectionScope"/>.PerTransaction.
            </summary>
            <returns>A new asynchronous database session.</returns>
        </member>
        <member name="M:MicroLite.ISessionFactory.OpenAsyncSession(MicroLite.ConnectionScope)">
            <summary>
            Opens a new asynchronous session to the database using the specified <see cref="T:MicroLite.ConnectionScope"/>.
            </summary>
            <param name="connectionScope">The connection scope to use for the session.</param>
            <returns>A new asynchronous database session.</returns>
        </member>
        <member name="M:MicroLite.ISessionFactory.OpenReadOnlySession">
            <summary>
            Opens a new read-only session to the database using <see cref="T:MicroLite.ConnectionScope"/>.PerTransaction.
            </summary>
            <returns>A new read-only database session.</returns>
        </member>
        <member name="M:MicroLite.ISessionFactory.OpenReadOnlySession(MicroLite.ConnectionScope)">
            <summary>
            Opens a new read-only session to the database using the specified <see cref="T:MicroLite.ConnectionScope"/>.
            </summary>
            <param name="connectionScope">The connection scope to use for the session.</param>
            <returns>A new read-only database session.</returns>
        </member>
        <member name="M:MicroLite.ISessionFactory.OpenSession">
            <summary>
            Opens a new session to the database using <see cref="T:MicroLite.ConnectionScope"/>.PerTransaction.
            </summary>
            <returns>A new database session.</returns>
        </member>
        <member name="M:MicroLite.ISessionFactory.OpenSession(MicroLite.ConnectionScope)">
            <summary>
            Opens a new session to the database using the specified <see cref="T:MicroLite.ConnectionScope"/>.
            </summary>
            <param name="connectionScope">The connection scope to use for the session.</param>
            <returns>A new database session.</returns>
        </member>
        <member name="P:MicroLite.ISessionFactory.ConnectionName">
            <summary>
            Gets the name of the connection in the connection strings configuration section used by the session factory.
            </summary>
        </member>
        <member name="P:MicroLite.ISessionFactory.DbDriver">
            <summary>
            Gets the DB driver used by the session factory.
            </summary>
        </member>
        <member name="T:MicroLite.Core.Transaction">
            <summary>
            The default implementation of <see cref="T:MicroLite.ITransaction"/>.
            </summary>
        </member>
        <member name="T:MicroLite.ITransaction">
            <summary>
            The interface for a database transaction.
            </summary>
        </member>
        <member name="M:MicroLite.ITransaction.Commit">
            <summary>
            Commits the transaction, applying all changes made within the transaction scope.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the transaction has been completed.</exception>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error committing the transaction.</exception>
        </member>
        <member name="M:MicroLite.ITransaction.Rollback">
            <summary>
            Rollbacks the transaction, undoing all changes made within the transaction scope.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the transaction has been completed.</exception>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error rolling back the transaction.</exception>
        </member>
        <member name="P:MicroLite.ITransaction.IsActive">
            <summary>
            Gets a value indicating whether this transaction is active.
            </summary>
        </member>
        <member name="M:MicroLite.Core.Transaction.#ctor(MicroLite.Core.ISessionBase,System.Data.IsolationLevel)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Core.Transaction"/> class.
            </summary>
            <param name="sessionBase">The session that the transaction is being created for.</param>
            <param name="isolationLevel">The isolation level.</param>
        </member>
        <member name="T:MicroLite.Dialect.FirebirdSqlDialect">
            <summary>
            The implementation of <see cref="T:MicroLite.Dialect.ISqlDialect"/> for Firebird.
            </summary>
        </member>
        <member name="T:MicroLite.Dialect.SqlDialect">
            <summary>
            The base class for implementations of <see cref="T:MicroLite.Dialect.ISqlDialect"/>.
            </summary>
        </member>
        <member name="T:MicroLite.Dialect.ISqlDialect">
            <summary>
            The interface for a class which builds SqlQueries for a specific database dialect.
            </summary>
        </member>
        <member name="M:MicroLite.Dialect.ISqlDialect.BuildDeleteSqlQuery(MicroLite.Mapping.IObjectInfo,System.Object)">
            <summary>
            Builds an SqlQuery to delete the database record with the specified identifier for the type specified by the IObjectInfo.
            </summary>
            <param name="objectInfo">The object information.</param>
            <param name="identifier">The identifier of the instance to delete.</param>
            <returns>The created <see cref="T:MicroLite.SqlQuery"/>.</returns>
        </member>
        <member name="M:MicroLite.Dialect.ISqlDialect.BuildInsertSqlQuery(MicroLite.Mapping.IObjectInfo,System.Object)">
            <summary>
            Builds an SqlQuery to insert a database record for the specified instance with the current property values of the instance.
            </summary>
            <param name="objectInfo">The object information.</param>
            <param name="instance">The instance to insert.</param>
            <returns>The created <see cref="T:MicroLite.SqlQuery"/>.</returns>
        </member>
        <member name="M:MicroLite.Dialect.ISqlDialect.BuildSelectInsertIdSqlQuery(MicroLite.Mapping.IObjectInfo)">
            <summary>
            Builds an SqlQuery to select the id of an inserted object if the database has generated the identifier.
            </summary>
            <param name="objectInfo">The object information.</param>
            <returns>The created <see cref="T:MicroLite.SqlQuery"/>.</returns>
        </member>
        <member name="M:MicroLite.Dialect.ISqlDialect.BuildSelectSqlQuery(MicroLite.Mapping.IObjectInfo,System.Object)">
            <summary>
            Builds an SqlQuery to select the database record with the specified identifier for the type specified by the IObjectInfo.
            </summary>
            <param name="objectInfo">The object information.</param>
            <param name="identifier">The identifier of the instance to select.</param>
            <returns>The created <see cref="T:MicroLite.SqlQuery"/>.</returns>
        </member>
        <member name="M:MicroLite.Dialect.ISqlDialect.BuildUpdateSqlQuery(MicroLite.Mapping.IObjectInfo,System.Object)">
            <summary>
            Builds an SqlQuery to update the database record for the specified instance with the current property values of the instance.
            </summary>
            <param name="objectInfo">The object information.</param>
            <param name="instance">The instance to update.</param>
            <returns>The created <see cref="T:MicroLite.SqlQuery"/>.</returns>
        </member>
        <member name="M:MicroLite.Dialect.ISqlDialect.BuildUpdateSqlQuery(MicroLite.ObjectDelta)">
            <summary>
            Builds an SqlQuery to update the database record based upon the values in the object delta.
            </summary>
            <param name="objectDelta">The object delta to create the query for.</param>
            <returns>The created <see cref="T:MicroLite.SqlQuery"/>.</returns>
        </member>
        <member name="M:MicroLite.Dialect.ISqlDialect.CountQuery(MicroLite.SqlQuery)">
            <summary>
            Creates an SqlQuery to count the number of records which would be returned by the specified SqlQuery.
            </summary>
            <param name="sqlQuery">The SQL query.</param>
            <returns>An <see cref="T:MicroLite.SqlQuery"/> to count the number of records which would be returned by the specified SqlQuery.</returns>
        </member>
        <member name="M:MicroLite.Dialect.ISqlDialect.PageQuery(MicroLite.SqlQuery,MicroLite.PagingOptions)">
            <summary>
            Creates an SqlQuery to page the records which would be returned by the specified SqlQuery based upon the paging options.
            </summary>
            <param name="sqlQuery">The SQL query.</param>
            <param name="pagingOptions">The paging options.</param>
            <returns>
            A <see cref="T:MicroLite.SqlQuery"/> to return the paged results of the specified query.
            </returns>
        </member>
        <member name="P:MicroLite.Dialect.ISqlDialect.SqlCharacters">
            <summary>
            Gets the SQL characters used by the SQL dialect.
            </summary>
        </member>
        <member name="P:MicroLite.Dialect.ISqlDialect.SupportsSelectInsertedIdentifier">
            <summary>
            Gets a value indicating whether the SQL Dialect supports selecting the identifier value of an inserted column.
            </summary>
        </member>
        <member name="M:MicroLite.Dialect.SqlDialect.#ctor(MicroLite.Characters.SqlCharacters)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Dialect.SqlDialect"/> class.
            </summary>
            <param name="sqlCharacters">The SQL characters.</param>
        </member>
        <member name="M:MicroLite.Dialect.SqlDialect.BuildDeleteSqlQuery(MicroLite.Mapping.IObjectInfo,System.Object)">
            <summary>
            Builds an SqlQuery to delete the database record with the specified identifier for the type specified by the IObjectInfo.
            </summary>
            <param name="objectInfo">The object information.</param>
            <param name="identifier">The identifier of the instance to delete.</param>
            <returns>
            The created <see cref="T:MicroLite.SqlQuery"/>.
            </returns>
        </member>
        <member name="M:MicroLite.Dialect.SqlDialect.BuildInsertSqlQuery(MicroLite.Mapping.IObjectInfo,System.Object)">
            <summary>
            Builds an SqlQuery to insert a database record for the specified instance with the current property values of the instance.
            </summary>
            <param name="objectInfo">The object information.</param>
            <param name="instance">The instance to insert.</param>
            <returns>
            The created <see cref="T:MicroLite.SqlQuery"/>.
            </returns>
        </member>
        <member name="M:MicroLite.Dialect.SqlDialect.BuildSelectInsertIdSqlQuery(MicroLite.Mapping.IObjectInfo)">
            <summary>
            Builds an SqlQuery to select the identity of an inserted object if the database supports Identity or AutoIncrement.
            </summary>
            <param name="objectInfo">The object information.</param>
            <returns>
            The created <see cref="T:MicroLite.SqlQuery"/>.
            </returns>
        </member>
        <member name="M:MicroLite.Dialect.SqlDialect.BuildSelectSqlQuery(MicroLite.Mapping.IObjectInfo,System.Object)">
            <summary>
            Builds an SqlQuery to select the database record with the specified identifier for the type specified by the IObjectInfo.
            </summary>
            <param name="objectInfo">The object information.</param>
            <param name="identifier">The identifier of the instance to select.</param>
            <returns>
            The created <see cref="T:MicroLite.SqlQuery"/>.
            </returns>
        </member>
        <member name="M:MicroLite.Dialect.SqlDialect.BuildUpdateSqlQuery(MicroLite.Mapping.IObjectInfo,System.Object)">
            <summary>
            Builds an SqlQuery to update the database record for the specified instance with the current property values of the instance.
            </summary>
            <param name="objectInfo">The object information.</param>
            <param name="instance">The instance to update.</param>
            <returns>
            The created <see cref="T:MicroLite.SqlQuery"/>.
            </returns>
        </member>
        <member name="M:MicroLite.Dialect.SqlDialect.BuildUpdateSqlQuery(MicroLite.ObjectDelta)">
            <summary>
            Creates an SqlQuery to perform an update based upon the values in the object delta.
            </summary>
            <param name="objectDelta">The object delta to create the query for.</param>
            <returns>
            The created <see cref="T:MicroLite.SqlQuery"/>.
            </returns>
        </member>
        <member name="M:MicroLite.Dialect.SqlDialect.CountQuery(MicroLite.SqlQuery)">
            <summary>
            Creates an SqlQuery to count the number of records which would be returned by the specified SqlQuery.
            </summary>
            <param name="sqlQuery">The SQL query.</param>
            <returns>
            An <see cref="T:MicroLite.SqlQuery"/> to count the number of records which would be returned by the specified SqlQuery.
            </returns>
        </member>
        <member name="M:MicroLite.Dialect.SqlDialect.PageQuery(MicroLite.SqlQuery,MicroLite.PagingOptions)">
            <summary>
            Creates an SqlQuery to page the records which would be returned by the specified SqlQuery based upon the paging options.
            </summary>
            <param name="sqlQuery">The SQL query.</param>
            <param name="pagingOptions">The paging options.</param>
            <returns>
            A <see cref="T:MicroLite.SqlQuery"/> to return the paged results of the specified query.
            </returns>
        </member>
        <member name="M:MicroLite.Dialect.SqlDialect.BuildDeleteCommandText(MicroLite.Mapping.IObjectInfo)">
            <summary>
            Builds the command text to delete a database record for the specified <see cref="T:MicroLite.Mapping.IObjectInfo"/>.
            </summary>
            <param name="objectInfo">The object information.</param>
            <returns>
            The created command text.
            </returns>
        </member>
        <member name="M:MicroLite.Dialect.SqlDialect.BuildInsertCommandText(MicroLite.Mapping.IObjectInfo)">
            <summary>
            Builds the command text to insert a database record for the specified <see cref="T:MicroLite.Mapping.IObjectInfo"/>.
            </summary>
            <param name="objectInfo">The object information.</param>
            <returns>
            The created command text.
            </returns>
        </member>
        <member name="M:MicroLite.Dialect.SqlDialect.BuildSelectCommandText(MicroLite.Mapping.IObjectInfo)">
            <summary>
            Builds the command text to select a database record for the specified <see cref="T:MicroLite.Mapping.IObjectInfo"/>.
            </summary>
            <param name="objectInfo">The object information.</param>
            <returns>
            The created command text.
            </returns>
        </member>
        <member name="M:MicroLite.Dialect.SqlDialect.BuildUpdateCommandText(MicroLite.Mapping.IObjectInfo)">
            <summary>
            Builds the command text to update a database record for the specified <see cref="T:MicroLite.Mapping.IObjectInfo"/>.
            </summary>
            <param name="objectInfo">The object information.</param>
            <returns>
            The created command text.
            </returns>
        </member>
        <member name="P:MicroLite.Dialect.SqlDialect.SqlCharacters">
            <summary>
            Gets the SQL characters used by the SQL dialect.
            </summary>
        </member>
        <member name="P:MicroLite.Dialect.SqlDialect.SupportsSelectInsertedIdentifier">
            <summary>
            Gets a value indicating whether the SQL Dialect supports selecting the identifier value of an inserted column.
            </summary>
        </member>
        <member name="M:MicroLite.Dialect.FirebirdSqlDialect.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Dialect.FirebirdSqlDialect"/> class.
            </summary>
        </member>
        <member name="T:MicroLite.Dialect.MsSql2005Dialect">
            <summary>
            The implementation of <see cref="T:MicroLite.Dialect.ISqlDialect"/> for MsSql Server 2005 or later.
            </summary>
        </member>
        <member name="M:MicroLite.Dialect.MsSql2005Dialect.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Dialect.MsSql2005Dialect"/> class.
            </summary>
        </member>
        <member name="T:MicroLite.Dialect.MsSql2012Dialect">
            <summary>
            The implementation of <see cref="T:MicroLite.Dialect.ISqlDialect"/> for MsSql Server 2012 or later.
            </summary>
        </member>
        <member name="T:MicroLite.Dialect.MySqlDialect">
            <summary>
            The implementation of <see cref="T:MicroLite.Dialect.ISqlDialect"/> for MySql server.
            </summary>
        </member>
        <member name="M:MicroLite.Dialect.MySqlDialect.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Dialect.MySqlDialect"/> class.
            </summary>
        </member>
        <member name="T:MicroLite.Dialect.PostgreSqlDialect">
            <summary>
            The implementation of <see cref="T:MicroLite.Dialect.ISqlDialect"/> for Postgre server.
            </summary>
        </member>
        <member name="M:MicroLite.Dialect.PostgreSqlDialect.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Dialect.PostgreSqlDialect"/> class.
            </summary>
        </member>
        <member name="T:MicroLite.Dialect.SQLiteDialect">
            <summary>
            The implementation of <see cref="T:MicroLite.Dialect.ISqlDialect"/> for SQLite.
            </summary>
        </member>
        <member name="M:MicroLite.Dialect.SQLiteDialect.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Dialect.SQLiteDialect"/> class.
            </summary>
        </member>
        <member name="M:MicroLite.Dialect.SQLiteDialect.PageQuery(MicroLite.SqlQuery,MicroLite.PagingOptions)">
            <summary>
            Creates an SqlQuery to page the records which would be returned by the specified SqlQuery based upon the paging options.
            </summary>
            <param name="sqlQuery">The SQL query.</param>
            <param name="pagingOptions">The paging options.</param>
            <returns>
            A <see cref="T:MicroLite.SqlQuery" /> to return the paged results of the specified query.
            </returns>
        </member>
        <member name="T:MicroLite.Dialect.SqlServerCeDialect">
            <summary>
            The implementation of <see cref="T:MicroLite.Dialect.ISqlDialect"/> for SQL Server Compact Edition.
            </summary>
        </member>
        <member name="M:MicroLite.Dialect.SqlServerCeDialect.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Dialect.SqlServerCeDialect"/> class.
            </summary>
        </member>
        <member name="T:MicroLite.Driver.DbDriver">
            <summary>
            The base class for implementations of <see cref="T:MicroLite.Driver.IDbDriver"/>.
            </summary>
        </member>
        <member name="T:MicroLite.Driver.IDbDriver">
            <summary>
            The interface for a class which handles IDbConnections and IDbCommands for a specific database.
            </summary>
        </member>
        <member name="M:MicroLite.Driver.IDbDriver.BuildCommand(System.Data.IDbCommand,MicroLite.SqlQuery)">
            <summary>
            Builds the IDbCommand command using the values in the specified SqlQuery.
            </summary>
            <param name="command">The command to build from the values in the specified SqlQuery.</param>
            <param name="sqlQuery">The SQL query containing the values for the command.</param>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if the number of arguments does not match the number of parameter names.</exception>
        </member>
        <member name="M:MicroLite.Driver.IDbDriver.Combine(System.Collections.Generic.IEnumerable{MicroLite.SqlQuery})">
            <summary>
            Combines the specified SQL queries into a single SqlQuery.
            </summary>
            <param name="sqlQueries">The SQL queries to be combined.</param>
            <returns>An <see cref="T:MicroLite.SqlQuery"/> containing the combined command text and arguments.</returns>
        </member>
        <member name="M:MicroLite.Driver.IDbDriver.Combine(MicroLite.SqlQuery,MicroLite.SqlQuery)">
            <summary>
            Combines the specified SQL queries into a single SqlQuery.
            </summary>
            <param name="sqlQuery1">The first SQL query to be combined.</param>
            <param name="sqlQuery2">The second SQL query to be combined.</param>
            <returns>An <see cref="T:MicroLite.SqlQuery"/> containing the combined command text and arguments.</returns>
        </member>
        <member name="M:MicroLite.Driver.IDbDriver.CreateConnection">
            <summary>
            Creates an IDbConnection to the database.
            </summary>
            <returns>The IDbConnection to the database.</returns>
        </member>
        <member name="P:MicroLite.Driver.IDbDriver.ConnectionString">
            <summary>
            Gets or sets the connection string of the database this Db Driver is connecting to.
            </summary>
        </member>
        <member name="P:MicroLite.Driver.IDbDriver.DbProviderFactory">
            <summary>
            Gets or sets the database provider factory.
            </summary>
        </member>
        <member name="P:MicroLite.Driver.IDbDriver.SupportsBatchedQueries">
            <summary>
            Gets a value indicating whether this DbDriver supports batched queries.
            </summary>
        </member>
        <member name="M:MicroLite.Driver.DbDriver.#ctor(MicroLite.Characters.SqlCharacters)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Driver.DbDriver"/> class.
            </summary>
            <param name="sqlCharacters">The SQL characters.</param>
        </member>
        <member name="M:MicroLite.Driver.DbDriver.BuildCommand(System.Data.IDbCommand,MicroLite.SqlQuery)">
            <summary>
            Builds the IDbCommand command using the values in the specified SqlQuery.
            </summary>
            <param name="command">The command to build from the values in the specified SqlQuery.</param>
            <param name="sqlQuery">The SQL query containing the values for the command.</param>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if the number of arguments does not match the number of parameter names.</exception>
        </member>
        <member name="M:MicroLite.Driver.DbDriver.Combine(System.Collections.Generic.IEnumerable{MicroLite.SqlQuery})">
            <summary>
            Combines the specified SQL queries into a single SqlQuery.
            </summary>
            <param name="sqlQueries">The SQL queries to be combined.</param>
            <returns>
            An <see cref="T:MicroLite.SqlQuery"/> containing the combined command text and arguments.
            </returns>
        </member>
        <member name="M:MicroLite.Driver.DbDriver.Combine(MicroLite.SqlQuery,MicroLite.SqlQuery)">
            <summary>
            Combines the specified SQL queries into a single SqlQuery.
            </summary>
            <param name="sqlQuery1">The first SQL query to be combined.</param>
            <param name="sqlQuery2">The second SQL query to be combined.</param>
            <returns>
            An <see cref="T:MicroLite.SqlQuery"/> containing the combined command text and arguments.
            </returns>
        </member>
        <member name="M:MicroLite.Driver.DbDriver.CreateConnection">
            <summary>
            Creates an IDbConnection to the database.
            </summary>
            <returns>
            The IDbConnection to the database.
            </returns>
        </member>
        <member name="M:MicroLite.Driver.DbDriver.BuildParameter(System.Data.IDbDataParameter,System.String,MicroLite.SqlArgument)">
            <summary>
            Builds the the IDbDataParameter using the specified name and value.
            </summary>
            <param name="parameter">The parameter to build.</param>
            <param name="parameterName">The name for the parameter.</param>
            <param name="sqlArgument">The <see cref="T:MicroLite.SqlArgument"/> for the parameter.</param>
        </member>
        <member name="M:MicroLite.Driver.DbDriver.GetCommandText(System.String)">
            <summary>
            Gets the command text.
            </summary>
            <param name="commandText">The command text.</param>
            <returns>The actual command text.</returns>
        </member>
        <member name="M:MicroLite.Driver.DbDriver.GetCommandType(System.String)">
            <summary>
            Gets the type of the command.
            </summary>
            <param name="commandText">The command text.</param>
            <returns>The CommandType for the specified command text.</returns>
        </member>
        <member name="M:MicroLite.Driver.DbDriver.IsStoredProcedureCall(System.String)">
            <summary>
            Determines whether the command text is a stored procedure call.
            </summary>
            <param name="commandText">The command text to inspect.</param>
            <returns>true if the command text is a stored procedure call, otherwise false.</returns>
        </member>
        <member name="P:MicroLite.Driver.DbDriver.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
        </member>
        <member name="P:MicroLite.Driver.DbDriver.DbProviderFactory">
            <summary>
            Gets or sets the database provider factory.
            </summary>
        </member>
        <member name="P:MicroLite.Driver.DbDriver.SupportsBatchedQueries">
            <summary>
            Gets a value indicating whether this DbDriver supports batched queries.
            </summary>
            <remarks>Returns false unless overridden.</remarks>
        </member>
        <member name="P:MicroLite.Driver.DbDriver.SqlCharacters">
            <summary>
            Gets the SQL characters used by the DbDriver.
            </summary>
        </member>
        <member name="P:MicroLite.Driver.DbDriver.SupportsCommandTimeout">
            <summary>
            Gets a value indicating whether this DbDriver supports command timeout.
            </summary>
            <remarks>Returns true unless overridden.</remarks>
        </member>
        <member name="P:MicroLite.Driver.DbDriver.SupportsStoredProcedures">
            <summary>
            Gets a value indicating whether this DbDriver supports stored procedures.
            </summary>
        </member>
        <member name="T:MicroLite.Driver.FirebirdDbDriver">
            <summary>
            The implementation of <see cref="T:MicroLite.Driver.IDbDriver"/> for Firebird.
            </summary>
        </member>
        <member name="M:MicroLite.Driver.FirebirdDbDriver.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Driver.FirebirdDbDriver"/> class.
            </summary>
        </member>
        <member name="T:MicroLite.Driver.MsSqlDbDriver">
            <summary>
            The implementation of <see cref="T:MicroLite.Driver.IDbDriver"/> for MsSql server.
            </summary>
        </member>
        <member name="M:MicroLite.Driver.MsSqlDbDriver.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Driver.MsSqlDbDriver"/> class.
            </summary>
        </member>
        <member name="T:MicroLite.Driver.MySqlDbDriver">
            <summary>
            The implementation of <see cref="T:MicroLite.Driver.IDbDriver"/> for MySql server.
            </summary>
        </member>
        <member name="M:MicroLite.Driver.MySqlDbDriver.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Driver.MySqlDbDriver"/> class.
            </summary>
        </member>
        <member name="T:MicroLite.Driver.PostgreSqlDbDriver">
            <summary>
            The implementation of <see cref="T:MicroLite.Driver.IDbDriver"/> for PostgreSql server.
            </summary>
        </member>
        <member name="M:MicroLite.Driver.PostgreSqlDbDriver.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Driver.PostgreSqlDbDriver"/> class.
            </summary>
        </member>
        <member name="T:MicroLite.Driver.SQLiteDbDriver">
            <summary>
            The implementation of <see cref="T:MicroLite.Driver.IDbDriver"/> for SQLite.
            </summary>
        </member>
        <member name="M:MicroLite.Driver.SQLiteDbDriver.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Driver.SQLiteDbDriver"/> class.
            </summary>
        </member>
        <member name="T:MicroLite.Driver.SqlServerCeDbDriver">
            <summary>
            The implementation of <see cref="T:MicroLite.Driver.IDbDriver"/> for SQL Server Compact Edition.
            </summary>
        </member>
        <member name="M:MicroLite.Driver.SqlServerCeDbDriver.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Driver.SqlServerCeDbDriver"/> class.
            </summary>
        </member>
        <member name="P:MicroLite.Driver.SqlServerCeDbDriver.SupportsCommandTimeout">
            <summary>
            Gets a value indicating whether this DbDriver supports command timeout.
            </summary>
            <remarks>
            Returns true unless overridden.
            </remarks>
            <remarks>SQL Server Compact Edition doesn't support command timeout.</remarks>
        </member>
        <member name="T:MicroLite.ExceptionMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MicroLite.ExceptionMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MicroLite.ExceptionMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MicroLite.ExceptionMessages.ArgumentNullOrEmpty">
            <summary>
              Looks up a localized string similar to The {0} must be specified.
            </summary>
        </member>
        <member name="P:MicroLite.ExceptionMessages.AttributeMappingConvention_NoTableAttribute">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; cannot be used by MicroLite as is not decorated with a TableAttribute for further information about using the Attribute base Mapping, see the wiki or blog.
            </summary>
        </member>
        <member name="P:MicroLite.ExceptionMessages.DbDriver_ArgumentsCountMismatch">
            <summary>
              Looks up a localized string similar to The number of parameters in the SQL statement and the number of specified parameter arguments should match. However &apos;{0}&apos; parameters used in the SQL statement and &apos;{1}&apos; parameter arguments were specified..
            </summary>
        </member>
        <member name="P:MicroLite.ExceptionMessages.ExpandoObjectInfo_NotSupportedReason">
            <summary>
              Looks up a localized string similar to The &apos;dynamic&apos; type can only be used for queries where an SqlQuery is supplied, it cannot be used for select by identifier, insert, update or delete..
            </summary>
        </member>
        <member name="P:MicroLite.ExceptionMessages.FluentConfiguration_ConnectionNotFound">
            <summary>
              Looks up a localized string similar to No connection string was found in the &lt;connectionStrings&gt; section of the app/web.config with the name &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:MicroLite.ExceptionMessages.Include_SingleRecordExpected">
            <summary>
              Looks up a localized string similar to Multiple records have been returned by the query, the query should return a single row only..
            </summary>
        </member>
        <member name="P:MicroLite.ExceptionMessages.IncludeScalar_MultipleColumns">
            <summary>
              Looks up a localized string similar to The scalar query should return a single row with a single column.
            </summary>
        </member>
        <member name="P:MicroLite.ExceptionMessages.ObjectDelta_MustContainAtLeastOneChange">
            <summary>
              Looks up a localized string similar to An ObjectDelta must contain at least one change, ensure that you have called AddChange with the property name and new value for each property you wish to update.
            </summary>
        </member>
        <member name="P:MicroLite.ExceptionMessages.ObjectInfo_TypeMustBeClass">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; is not a class and therefore cannot be used by the MicroLite ORM Framework.
            </summary>
        </member>
        <member name="P:MicroLite.ExceptionMessages.ObjectInfo_TypeMustBePublic">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; cannot be used by the MicroLite ORM Framework unless it is declared &apos;public&apos;.
            </summary>
        </member>
        <member name="P:MicroLite.ExceptionMessages.ObjectInfo_TypeMustHaveDefaultConstructor">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; has no default (parameterless) constructor and therefore cannot be used by the MicroLite ORM Framework.
            </summary>
        </member>
        <member name="P:MicroLite.ExceptionMessages.ObjectInfo_TypeMustNotBeAbstract">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; is abstract and therefore cannot be used by the MicroLite ORM Framework.
            </summary>
        </member>
        <member name="P:MicroLite.ExceptionMessages.PagingOptions_PagesMustBeAtleastOne">
            <summary>
              Looks up a localized string similar to The first page which can be requested is page 1.
            </summary>
        </member>
        <member name="P:MicroLite.ExceptionMessages.PagingOptions_ResultsPerPageMustBeAtLeast1">
            <summary>
              Looks up a localized string similar to There must be at least 1 result per page.
            </summary>
        </member>
        <member name="P:MicroLite.ExceptionMessages.PagingOptions_SkipMustBeZeroOrAbove">
            <summary>
              Looks up a localized string similar to It is not possible to skip less than 0 results.
            </summary>
        </member>
        <member name="P:MicroLite.ExceptionMessages.PagingOptions_TakeMustBeZeroOrAbove">
            <summary>
              Looks up a localized string similar to At least 1 result must be returned.
            </summary>
        </member>
        <member name="P:MicroLite.ExceptionMessages.PocoObjectInfo_IdentifierNotSetForInsert">
            <summary>
              Looks up a localized string similar to The object cannot be inserted as it does not have an identifier value set and the identifier strategy specifies that it should be assigned before being inserted..
            </summary>
        </member>
        <member name="P:MicroLite.ExceptionMessages.PocoObjectInfo_IdentifierSetForInsert">
            <summary>
              Looks up a localized string similar to The object already has an identifier value so it cannot be inserted.
            </summary>
        </member>
        <member name="P:MicroLite.ExceptionMessages.PocoObjectInfo_NoIdentifierColumn">
            <summary>
              Looks up a localized string similar to No column has been mapped as the identifier for the table &apos;{0}.{1}&apos;, as a result it cannot be used for Select by Id, Insert, Update or Delete calls.
            </summary>
        </member>
        <member name="P:MicroLite.ExceptionMessages.PocoObjectInfo_TypeMismatch">
            <summary>
              Looks up a localized string similar to The type of the object {0} does not match the type for the ObjectInfo {1}.
            </summary>
        </member>
        <member name="P:MicroLite.ExceptionMessages.Session_IdentifierNotSetForDelete">
            <summary>
              Looks up a localized string similar to The object does not have an identifier value set so it cannot be deleted.
            </summary>
        </member>
        <member name="P:MicroLite.ExceptionMessages.Session_IdentifierNotSetForUpdate">
            <summary>
              Looks up a localized string similar to The object does not have an identifier value set so it cannot be updated.
            </summary>
        </member>
        <member name="P:MicroLite.ExceptionMessages.Session_PagingOptionsMustNotBeNone">
            <summary>
              Looks up a localized string similar to The paging options must contain a count and offset, use the PagingOptions.ForPage or PagingOptions.SkipTake methods to specify the values.
            </summary>
        </member>
        <member name="P:MicroLite.ExceptionMessages.TableInfo_ColumnMappedMultipleTimes">
            <summary>
              Looks up a localized string similar to The column &apos;{0}&apos; has been mapped multiple times, this usually occurs if multiple properties have the same column name specified in the column attribute.
            </summary>
        </member>
        <member name="P:MicroLite.ExceptionMessages.TableInfo_MultipleIdentifierColumns">
            <summary>
              Looks up a localized string similar to Multiple columns have been mapped as the identifier for the table &apos;{0}.{1}&apos;.
            </summary>
        </member>
        <member name="P:MicroLite.ExceptionMessages.TableInfo_SequenceNameNotSet">
            <summary>
              Looks up a localized string similar to The identifier &apos;{0}&apos; has been mapped using IdentifierStrategy.Sequence but no SequenceName has been specified..
            </summary>
        </member>
        <member name="P:MicroLite.ExceptionMessages.Transaction_AlreadyCompleted">
            <summary>
              Looks up a localized string similar to The Transaction has been completed.
            </summary>
        </member>
        <member name="P:MicroLite.ExceptionMessages.TupleObjectInfo_NotSupportedReason">
            <summary>
              Looks up a localized string similar to Tuple types can only be used for queries where an SqlQuery is supplied, it cannot be used for select by identifier, insert, update or delete..
            </summary>
        </member>
        <member name="P:MicroLite.ExceptionMessages.TupleObjectInfo_TupleNotSupported">
            <summary>
              Looks up a localized string similar to Only Tuple&lt;T1&gt; through to Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt; are supported..
            </summary>
        </member>
        <member name="T:MicroLite.Infrastructure.IHaveAsyncReadOnlySession">
            <summary>
            An interface for classes which have an <see cref="T:MicroLite.IAsyncReadOnlySession"/> property.
            </summary>
        </member>
        <member name="P:MicroLite.Infrastructure.IHaveAsyncReadOnlySession.Session">
            <summary>
            Gets or sets the asynchronous read-only MicroLite session.
            </summary>
        </member>
        <member name="T:MicroLite.Infrastructure.IHaveAsyncSession">
            <summary>
            An interface for classes which have an <see cref="T:MicroLite.IAsyncSession"/> property.
            </summary>
        </member>
        <member name="P:MicroLite.Infrastructure.IHaveAsyncSession.Session">
            <summary>
            Gets or sets the asynchronous MicroLite session.
            </summary>
        </member>
        <member name="T:MicroLite.Infrastructure.IHaveReadOnlySession">
            <summary>
            An interface for classes which have an <see cref="T:MicroLite.IReadOnlySession"/> property.
            </summary>
        </member>
        <member name="P:MicroLite.Infrastructure.IHaveReadOnlySession.Session">
            <summary>
            Gets or sets the read-only MicroLite session.
            </summary>
        </member>
        <member name="T:MicroLite.Infrastructure.IHaveSession">
            <summary>
            An interface for classes which have an <see cref="T:MicroLite.ISession"/> property.
            </summary>
        </member>
        <member name="P:MicroLite.Infrastructure.IHaveSession.Session">
            <summary>
            Gets or sets the MicroLite session.
            </summary>
        </member>
        <member name="T:MicroLite.Listeners.IDeleteListener">
            <summary>
            The interface which exposes hooks into the deletion of an object by the MicroLite ORM framework.
            </summary>
        </member>
        <member name="M:MicroLite.Listeners.IDeleteListener.AfterDelete(System.Object,System.Int32)">
            <summary>
            Invoked after the SqlQuery to delete the record for the instance has been executed.
            </summary>
            <param name="instance">The instance which has been deleted.</param>
            <param name="rowsAffected">The number of rows affected by the delete.</param>
        </member>
        <member name="M:MicroLite.Listeners.IDeleteListener.BeforeDelete(System.Object)">
            <summary>
            Invoked before the SqlQuery to delete the record from the database is created.
            </summary>
            <param name="instance">The instance to be deleted.</param>
        </member>
        <member name="T:MicroLite.Listeners.IdentifierStrategyListener">
            <summary>
            The implementation of <see cref="T:MicroLite.Listeners.IInsertListener"/> for setting the instance identifier value if
            <see cref="T:MicroLite.Mapping.IdentifierStrategy"/>.DbGenerated or <see cref="T:MicroLite.Mapping.IdentifierStrategy"/>.Sequence is used.
            </summary>
        </member>
        <member name="T:MicroLite.Listeners.IInsertListener">
            <summary>
            The interface which exposes hooks into the insertion of an object by the MicroLite ORM framework.
            </summary>
        </member>
        <member name="M:MicroLite.Listeners.IInsertListener.AfterInsert(System.Object,System.Object)">
            <summary>
            Invoked after the SqlQuery to insert the record for the instance has been executed.
            </summary>
            <param name="instance">The instance which has been inserted.</param>
            <param name="executeScalarResult">The execute scalar result (the identifier value returned by the database
            or null if the identifier is <see cref="T:MicroLite.Mapping.IdentifierStrategy"/>.Assigned.</param>
        </member>
        <member name="M:MicroLite.Listeners.IInsertListener.BeforeInsert(System.Object)">
            <summary>
            Invoked before the SqlQuery to insert the record into the database is created.
            </summary>
            <param name="instance">The instance to be inserted.</param>
        </member>
        <member name="M:MicroLite.Listeners.IdentifierStrategyListener.AfterInsert(System.Object,System.Object)">
            <summary>
            Invoked after the SqlQuery to insert the record for the instance has been executed.
            </summary>
            <param name="instance">The instance which has been inserted.</param>
            <param name="executeScalarResult">The execute scalar result (the identifier value returned by the database
            or null if the identifier is <see cref="T:MicroLite.Mapping.IdentifierStrategy"/>.Assigned.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if instance is null or IdentifierStrategy is DbGenerated
            and executeScalarResult is null.</exception>
        </member>
        <member name="M:MicroLite.Listeners.IdentifierStrategyListener.BeforeInsert(System.Object)">
            <summary>
            Invoked before the SqlQuery to insert the record into the database is created.
            </summary>
            <param name="instance">The instance to be inserted.</param>
        </member>
        <member name="T:MicroLite.Listeners.IUpdateListener">
            <summary>
            The interface which exposes hooks into the updating of an object by the MicroLite ORM framework.
            </summary>
        </member>
        <member name="M:MicroLite.Listeners.IUpdateListener.AfterUpdate(System.Object,System.Int32)">
            <summary>
            Invoked after the SqlQuery to update the record for the instance has been executed.
            </summary>
            <param name="instance">The instance which has been updates.</param>
            <param name="rowsAffected">The number of rows affected by the update.</param>
        </member>
        <member name="M:MicroLite.Listeners.IUpdateListener.BeforeUpdate(System.Object)">
            <summary>
            Invoked before the SqlQuery to update the record in the database is created.
            </summary>
            <param name="instance">The instance to be updated.</param>
        </member>
        <member name="T:MicroLite.Listeners.Listener">
            <summary>
            Static entry point for listener collections.
            </summary>
        </member>
        <member name="P:MicroLite.Listeners.Listener.DeleteListeners">
            <summary>
            Gets the listener collection which contains all registered <see cref="T:MicroLite.Listeners.IDeleteListener"/>s.
            </summary>
        </member>
        <member name="P:MicroLite.Listeners.Listener.InsertListener">
            <summary>
            Gets the listener collection which contains all registered <see cref="T:MicroLite.Listeners.IInsertListener"/>s.
            </summary>
        </member>
        <member name="P:MicroLite.Listeners.Listener.UpdateListeners">
            <summary>
            Gets the listener collection which contains all registered <see cref="T:MicroLite.Listeners.IUpdateListener"/>s.
            </summary>
        </member>
        <member name="T:MicroLite.Logging.EmptyLog">
            <summary>
            An implementation of ILog which always returns false for all log levels and all methods are no-op.
            </summary>
        </member>
        <member name="T:MicroLite.Logging.ILog">
            <summary>
            The interface for a framework independent logger.
            </summary>
        </member>
        <member name="M:MicroLite.Logging.ILog.Debug(System.String)">
            <summary>
            Writes the message to the log as a debug statement.
            </summary>
            <param name="message">The message to be logged.</param>
        </member>
        <member name="M:MicroLite.Logging.ILog.Debug(System.String,System.String[])">
            <summary>
            Writes the message to the log as a debug statement.
            </summary>
            <param name="message">The message to be logged.</param>
            <param name="formatArgs">The format args.</param>
        </member>
        <member name="M:MicroLite.Logging.ILog.Error(System.String)">
            <summary>
            Writes the message to the log as an error.
            </summary>
            <param name="message">The message to be logged.</param>
        </member>
        <member name="M:MicroLite.Logging.ILog.Error(System.String,System.Exception)">
            <summary>
            Writes the message to the log as an error along with the exception that occurred.
            </summary>
            <param name="message">The message to be logged.</param>
            <param name="exception">The exception that occurred.</param>
        </member>
        <member name="M:MicroLite.Logging.ILog.Error(System.String,System.String[])">
            <summary>
            Writes the message to the log as an error.
            </summary>
            <param name="message">The message to be logged.</param>
            <param name="formatArgs">The format args.</param>
        </member>
        <member name="M:MicroLite.Logging.ILog.Fatal(System.String)">
            <summary>
            Writes the message to the log as fatal.
            </summary>
            <param name="message">The message to be logged.</param>
        </member>
        <member name="M:MicroLite.Logging.ILog.Fatal(System.String,System.Exception)">
            <summary>
            Writes the message to the log as fatal along with the exception that occurred.
            </summary>
            <param name="message">The message to be logged.</param>
            <param name="exception">The exception that occurred.</param>
        </member>
        <member name="M:MicroLite.Logging.ILog.Fatal(System.String,System.String[])">
            <summary>
            Writes the message to the log as fatal.
            </summary>
            <param name="message">The message to be logged.</param>
            <param name="formatArgs">The format args.</param>
        </member>
        <member name="M:MicroLite.Logging.ILog.Info(System.String)">
            <summary>
            Writes the message to the log as information.
            </summary>
            <param name="message">The message to be logged.</param>
        </member>
        <member name="M:MicroLite.Logging.ILog.Info(System.String,System.String[])">
            <summary>
            Writes the message to the log as information.
            </summary>
            <param name="message">The message to be logged.</param>
            <param name="formatArgs">The format args.</param>
        </member>
        <member name="M:MicroLite.Logging.ILog.Warn(System.String)">
            <summary>
            Writes the message to the log as a warning.
            </summary>
            <param name="message">The message to be logged.</param>
        </member>
        <member name="M:MicroLite.Logging.ILog.Warn(System.String,System.String[])">
            <summary>
            Writes the message to the log as a warning.
            </summary>
            <param name="message">The message to be logged.</param>
            <param name="formatArgs">The format args.</param>
        </member>
        <member name="P:MicroLite.Logging.ILog.IsDebug">
            <summary>
            Gets a value indicating whether the logger is logging debug statements.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.ILog.IsError">
            <summary>
            Gets a value indicating whether the logger is logging error statements.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.ILog.IsFatal">
            <summary>
            Gets a value indicating whether the logger is logging fatal statements.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.ILog.IsInfo">
            <summary>
            Gets a value indicating whether the logger is logging info statements.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.ILog.IsWarn">
            <summary>
            Gets a value indicating whether the logger is logging warning statements.
            </summary>
        </member>
        <member name="T:MicroLite.Logging.LogManager">
            <summary>
            A class which the MicroLite ORM framework can call to resolve an ILog implementation.
            </summary>
        </member>
        <member name="M:MicroLite.Logging.LogManager.GetCurrentClassLog">
            <summary>
            Gets the log for the current (calling) class.
            </summary>
            <returns>The <see cref="T:MicroLite.Logging.ILog"/> for the class which called the method.</returns>
        </member>
        <member name="P:MicroLite.Logging.LogManager.GetLogger">
            <summary>
            Gets or sets the function which can be called by MicroLite to resolve the <see cref="T:MicroLite.Logging.ILog"/> to use.
            </summary>
        </member>
        <member name="T:MicroLite.Logging.LogMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.AttributeMappingConvention_IgnoringProperty">
            <summary>
              Looks up a localized string similar to The property &apos;{0}.{1}&apos; will not be mapped by MicroLite as it has no ColumnAttribute.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.ConfigureExtensions_UsingMappingConvention">
            <summary>
              Looks up a localized string similar to Using &apos;{0}&apos; as the mapping convention..
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.ConventionMappingConvention_IgnoringProperty">
            <summary>
              Looks up a localized string similar to The property &apos;{0}.{1}&apos; will not be mapped by MicroLite as the convention settings have specified it is ignored.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.DbDialect_BuildingCommand">
            <summary>
              Looks up a localized string similar to Building an IDbCommand for the SqlQuery.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.FluentConfiguration_CreatingSessionFactory">
            <summary>
              Looks up a localized string similar to Creating a session factory for the connection named &apos;{0}&apos; using the &apos;{1}&apos; and &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.IListener_SettingIdentifierValue">
            <summary>
              Looks up a localized string similar to Setting the identifier value for an instance of the type &apos;{0}&apos; to &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.MappingConvention_MappingColumnToProperty">
            <summary>
              Looks up a localized string similar to Mapping the property &apos;{0}.{1}&apos; to the column &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.MappingConvention_MappingTypeToTable">
            <summary>
              Looks up a localized string similar to Mapping the type &apos;{0}&apos; to the table &apos;{1}.{2}&apos;.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.MappingConvention_PropertyNotGetAndSet">
            <summary>
              Looks up a localized string similar to The property &apos;{0}.{1}&apos; will not be mapped by MicroLite as it does not have a public getter and setter..
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.ObjectInfo_CreatingInstance">
            <summary>
              Looks up a localized string similar to Creating instance of &apos;{0}&apos; using the results in the IDataReader.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.ObjectInfo_CreatingObjectInfo">
            <summary>
              Looks up a localized string similar to Creating the ObjectInfo for the type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.ObjectInfo_RetrievingObjectInfo">
            <summary>
              Looks up a localized string similar to Retrieving the ObjectInfo for &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.Session_ClosingConnection">
            <summary>
              Looks up a localized string similar to Closing the database connection.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.Session_Disposed">
            <summary>
              Looks up a localized string similar to The Session has been disposed.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.Session_ExecutingQueries">
            <summary>
              Looks up a localized string similar to Executing &apos;{0}&apos; queries.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.Session_OpeningConnection">
            <summary>
              Looks up a localized string similar to Opening the database connection.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.SessionFactory_CreatingAsyncReadOnlySession">
            <summary>
              Looks up a localized string similar to Creating a new async read only session for connection named &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.SessionFactory_CreatingAsyncSession">
            <summary>
              Looks up a localized string similar to Creating a new async session for connection named &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.SessionFactory_CreatingReadOnlySession">
            <summary>
              Looks up a localized string similar to Creating a new read only session for connection named &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.SessionFactory_CreatingSession">
            <summary>
              Looks up a localized string similar to Creating a new session for connection named &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.SqlDialect_CreatingSqlQuery">
            <summary>
              Looks up a localized string similar to Creating &apos;{0}&apos; SqlQuery.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.Transaction_BeginTransactionWithIsolationLevel">
            <summary>
              Looks up a localized string similar to Beginning a new Transaction with the IsolationLevel &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.Transaction_Committed">
            <summary>
              Looks up a localized string similar to The Transaction has successfully committed changes.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.Transaction_Committing">
            <summary>
              Looks up a localized string similar to The Transaction is committing changes.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.Transaction_Disposed">
            <summary>
              Looks up a localized string similar to The Transaction has been disposed.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.Transaction_DisposedUncommitted">
            <summary>
              Looks up a localized string similar to The Transaction is being disposed with uncommitted changes, they will be automatically rolled back.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.Transaction_RolledBack">
            <summary>
              Looks up a localized string similar to The Transaction has rolled back changes.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.Transaction_RollingBack">
            <summary>
              Looks up a localized string similar to The Transaction is rolling back changes.
            </summary>
        </member>
        <member name="P:MicroLite.Logging.LogMessages.Transaction_RollingBackFailedCommit">
            <summary>
              Looks up a localized string similar to Transaction rolling back changes from failed commit.
            </summary>
        </member>
        <member name="T:MicroLite.Mapping.Attributes.AttributeMappingConvention">
            <summary>
            The implementation of <see cref="T:MicroLite.Mapping.IMappingConvention"/> which uses attributes to map tables and columns
            to types and properties only maps if an attribute is present (opt-in).
            </summary>
        </member>
        <member name="T:MicroLite.Mapping.IMappingConvention">
            <summary>
            The interface for a class which implements a mapping convention between a class and a table.
            </summary>
        </member>
        <member name="M:MicroLite.Mapping.IMappingConvention.CreateObjectInfo(System.Type)">
            <summary>
            Creates the object info for the specified type.
            </summary>
            <param name="forType">The type to create the object info for.</param>
            <returns>The <see cref="T:MicroLite.Mapping.ObjectInfo"/> for the specified type.</returns>
        </member>
        <member name="T:MicroLite.Mapping.Attributes.ColumnAttribute">
            <summary>
            An attribute which can be applied to a property to specify the column name that the property maps to.
            </summary>
            <example>
            <code>
            // Option 1 - Column and property name match.
            [Column("FirstName")]
            public string FirstName
            {
                get;
                set;
            }
            </code>
            <code>
            // Option 2 - Column and property name differ.
            [Column("FName")]
            public string FirstName
            {
                get;
                set;
            }
            </code>
            <code>
            // Additionally, it is possible to restrict insert or updates to a column.
            [Column("Created", allowInsert: true, allowUpdate: false)]
            public DateTime Created
            {
                get;
                set;
            }
            </code>
            </example>
        </member>
        <member name="M:MicroLite.Mapping.Attributes.ColumnAttribute.#ctor(System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Mapping.Attributes.ColumnAttribute"/> class.
            </summary>
            <param name="name">The name of the column in the database table that the property maps to.</param>
        </member>
        <member name="M:MicroLite.Mapping.Attributes.ColumnAttribute.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Mapping.Attributes.ColumnAttribute"/> class.
            </summary>
            <param name="name">The name of the column in the database table that the property maps to.</param>
            <param name="allowInsert">true if the column value can be inserted, otherwise false.</param>
            <param name="allowUpdate">true if the column value can be updated, otherwise false.</param>
        </member>
        <member name="P:MicroLite.Mapping.Attributes.ColumnAttribute.AllowInsert">
            <summary>
            Gets a value indicating whether the column value is allowed to be inserted.
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.Attributes.ColumnAttribute.AllowUpdate">
            <summary>
            Gets a value indicating whether the column value is allowed to be updated.
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.Attributes.ColumnAttribute.Name">
            <summary>
            Gets the name of the column in the database table that the property maps to
            </summary>
        </member>
        <member name="T:MicroLite.Mapping.Attributes.IdentifierAttribute">
            <summary>
            An attribute which can be applied to a property to specify that it maps to the row identifier (primary key)
            in the table and also defines the <see cref="P:MicroLite.Mapping.Attributes.IdentifierAttribute.IdentifierStrategy"/> used to manage the identifier's value.
            </summary>
            <example>
            <code>
            [Column("CustomerId")]
            [Identifier(IdentifierStrategy.DbGenerated)]
            public int Id
            {
                get;
                set;
            }
            </code>
            </example>
            <example>
            If the IdentifierStrategy Sequence is used, a sequence name must also be specified:
            <code>
            [Column("CustomerId")]
            [Identifier(IdentifierStrategy.Sequence, "CustomerIdSequence")]
            public int Id
            {
                get;
                set;
            }
            </code>
            </example>
        </member>
        <member name="M:MicroLite.Mapping.Attributes.IdentifierAttribute.#ctor(MicroLite.Mapping.IdentifierStrategy)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Mapping.Attributes.IdentifierAttribute"/> class.
            </summary>
            <param name="identifierStrategy">The identifier strategy used to manage the identifier's value.</param>
        </member>
        <member name="M:MicroLite.Mapping.Attributes.IdentifierAttribute.#ctor(MicroLite.Mapping.IdentifierStrategy,System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Mapping.Attributes.IdentifierAttribute"/> class.
            </summary>
            <param name="identifierStrategy">The identifier strategy used to manage the identifier's value.</param>
            <param name="sequenceName">The name of the sequence which generates the identifier value.</param>
        </member>
        <member name="P:MicroLite.Mapping.Attributes.IdentifierAttribute.IdentifierStrategy">
            <summary>
            Gets the identifier strategy used to manage the identifier's value.
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.Attributes.IdentifierAttribute.SequenceName">
            <summary>
            Gets the name of the sequence which generates the identifier value.
            </summary>
        </member>
        <member name="T:MicroLite.Mapping.Attributes.TableAttribute">
            <summary>
            An attribute which can be applied to a class to specify the table name and database schema the table
            exists within.
            </summary>
            <example>
            <code>
            // Option 1 - Specify schema and table name.
            [Table("dbo", "Customers")]
            public class Customer
            {
               ...
            }
            </code>
            <code>
            // Option 2 - Specify table name only.
            [Table("Customers")]
            public class Customer
            {
               ...
            }
            </code>
            </example>
        </member>
        <member name="M:MicroLite.Mapping.Attributes.TableAttribute.#ctor(System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Mapping.Attributes.TableAttribute"/> class.
            </summary>
            <param name="name">The name of the table.</param>
        </member>
        <member name="M:MicroLite.Mapping.Attributes.TableAttribute.#ctor(System.String,System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Mapping.Attributes.TableAttribute"/> class.
            </summary>
            <param name="schema">The database schema the table exists within (e.g. 'dbo'); otherwise null.</param>
            <param name="name">The name of the table.</param>
        </member>
        <member name="P:MicroLite.Mapping.Attributes.TableAttribute.Name">
            <summary>
            Gets the name of the table.
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.Attributes.TableAttribute.Schema">
            <summary>
            Gets the database schema the table exists within (e.g. 'dbo'); otherwise null.
            </summary>
        </member>
        <member name="T:MicroLite.Mapping.ColumnInfo">
            <summary>
            A class which contains information about a database table column and the property it is mapped to.
            </summary>
        </member>
        <member name="M:MicroLite.Mapping.ColumnInfo.#ctor(System.String,System.Data.DbType,System.Reflection.PropertyInfo,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Mapping.ColumnInfo"/> class.
            </summary>
            <param name="columnName">The name of the column in the database table.</param>
            <param name="dbType">The <see cref="P:MicroLite.Mapping.ColumnInfo.DbType"/> of the column in the database table.</param>
            <param name="propertyInfo">The property info for the property the column maps to.</param>
            <param name="isIdentifier">A value indicating whether column is the table identifier column (primary key).</param>
            <param name="allowInsert">true if the column can be inserted, otherwise false.</param>
            <param name="allowUpdate">true if the column can be updated, otherwise false.</param>
            <param name="sequenceName">The name of the sequence which generates the identifier value or null if sequences are not used.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if columnName or propertyInfo are null.</exception>
        </member>
        <member name="P:MicroLite.Mapping.ColumnInfo.AllowInsert">
            <summary>
            Gets a value indicating whether the column value is allowed to be inserted.
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.ColumnInfo.AllowUpdate">
            <summary>
            Gets a value indicating whether the column value is allowed to be updated.
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.ColumnInfo.ColumnName">
            <summary>
            Gets the name of the column in the database table.
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.ColumnInfo.DbType">
            <summary>
            Gets the <see cref="P:MicroLite.Mapping.ColumnInfo.DbType"/> of the column in the database table.
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.ColumnInfo.IsIdentifier">
            <summary>
            Gets a value indicating whether column is the table identifier column (primary key).
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.ColumnInfo.PropertyInfo">
            <summary>
            Gets the property info for the property the column maps to.
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.ColumnInfo.SequenceName">
            <summary>
            Gets the name of the sequence which generates the identifier value.
            </summary>
        </member>
        <member name="T:MicroLite.Mapping.ConventionMappingConvention">
            <summary>
            The implementation of <see cref="T:MicroLite.Mapping.IMappingConvention"/> which uses a convention to map tables and columns
            to types and properties.
            </summary>
        </member>
        <member name="T:MicroLite.Mapping.ConventionMappingSettings">
            <summary>
            A class containing the default convention mapping settings
            </summary>
        </member>
        <member name="M:MicroLite.Mapping.ConventionMappingSettings.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Mapping.ConventionMappingSettings"/> class.
            </summary>
        </member>
        <member name="M:MicroLite.Mapping.ConventionMappingSettings.GetColumnName(System.Reflection.PropertyInfo)">
            <summary>
            Gets the column name for the specified <see cref="T:System.Reflection.PropertyInfo"/> using the default convention settings.
            </summary>
            <param name="propertyInfo">The property info for the property.</param>
            <returns>The column name for the property.</returns>
        </member>
        <member name="M:MicroLite.Mapping.ConventionMappingSettings.GetTableName(System.Type)">
            <summary>
            Gets the table name for the specified <see cref="T:System.Type"/> using the default contention settings.
            </summary>
            <param name="type">The type for the class.</param>
            <returns>The table name for the type.</returns>
        </member>
        <member name="P:MicroLite.Mapping.ConventionMappingSettings.Default">
            <summary>
            Gets an instance of the settings with the default options set.
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.ConventionMappingSettings.LowercaseWithUnderscores">
            <summary>
            Gets an instance of the settings with lowercase names with underscore separators (e.g. 'CreditCards' -> 'credit_cards').
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.ConventionMappingSettings.UppercaseWithUnderscores">
            <summary>
            Gets an instance of the settings with uppercase names with underscore separators (e.g. 'CreditCards' -> 'CREDIT_CARDS').
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.ConventionMappingSettings.AllowInsert">
            <summary>
            Gets or sets the function which specifies whether a property can be inserted (returns true by default).
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.ConventionMappingSettings.AllowUpdate">
            <summary>
            Gets or sets the function which specifies whether a property can be updated (returns true by default).
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.ConventionMappingSettings.Ignore">
            <summary>
            Gets or sets the function which specifies whether a property should be ignored from the mapping (returns false by default).
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.ConventionMappingSettings.InflectionService">
            <summary>
            Gets or sets the inflection service (defaults to InflectionService.English).
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.ConventionMappingSettings.IsIdentifier">
            <summary>
            Gets or sets the function which determines whether a property is the identifier property (default returns true if the property name is 'Id' or {ClassName} + 'Id').
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.ConventionMappingSettings.ResolveColumnName">
            <summary>
            Gets or sets the function which determines the name of the column the property is mapped to (default returns the property name unless the property type is an enum in which case it returns {EnumName} + 'Id').
            </summary>
            <remarks>Only called if the call to IsIdentifier returns false.</remarks>
        </member>
        <member name="P:MicroLite.Mapping.ConventionMappingSettings.ResolveDbType">
            <summary>
            Gets or sets the function which resolves the DbType for the column.
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.ConventionMappingSettings.ResolveIdentifierColumnName">
            <summary>
            Gets or sets the function which determines the name of the identifier column for the table (default returns the property name).
            </summary>
            <remarks>Only called if the call to IsIdentifier returns true.</remarks>
        </member>
        <member name="P:MicroLite.Mapping.ConventionMappingSettings.ResolveIdentifierStrategy">
            <summary>
            Gets or sets the function which specifies the identifier strategy for a class (returns DbGenerated by default).
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.ConventionMappingSettings.ResolveSequenceName">
            <summary>
            Gets or sets the function which determines the name of the sequence used to generate the identifier value (default returns null).
            </summary>
            <remarks>Only called if the call to ResolveIdentifierStrategy returns <see cref="T:MicroLite.Mapping.IdentifierStrategy"/>.Sequence.</remarks>
        </member>
        <member name="P:MicroLite.Mapping.ConventionMappingSettings.ResolveTableName">
            <summary>
            Gets or sets the function which determines the name of the table the class is mapped to (default returns the plural version of the type name using the specified inflection service, or the type name if UsePluralClassNameForTableName is false).
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.ConventionMappingSettings.ResolveTableSchema">
            <summary>
            Gets or sets the function which determines the schema of the table the class is mapped to (default returns null).
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.ConventionMappingSettings.UsePluralClassNameForTableName">
            <summary>
            Gets or sets a value indicating whether to use the plural class name for the table name (defaults to true).
            </summary>
        </member>
        <member name="T:MicroLite.Mapping.IObjectInfo">
            <summary>
            The interface for a class which describes a type and the table it is mapped to.
            </summary>
        </member>
        <member name="M:MicroLite.Mapping.IObjectInfo.CreateInstance(System.Data.IDataReader)">
            <summary>
            Creates a new instance of the type populated with the values from the specified IDataReader.
            </summary>
            <param name="reader">The IDataReader containing the values to build the instance from.</param>
            <returns>A new instance of the type populated with the values from the specified IDataReader.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if reader is null.</exception>
        </member>
        <member name="M:MicroLite.Mapping.IObjectInfo.GetColumnInfo(System.String)">
            <summary>
            Gets the column information for the column with the specified name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns>The ColumnInfo or null if no column is mapped for the object with the specified name.</returns>
        </member>
        <member name="M:MicroLite.Mapping.IObjectInfo.GetIdentifierValue(System.Object)">
            <summary>
            Gets the property value for the object identifier.
            </summary>
            <param name="instance">The instance to retrieve the value from.</param>
            <returns>The value of the identifier property.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if instance is null.</exception>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if the instance is not of the correct type.</exception>
        </member>
        <member name="M:MicroLite.Mapping.IObjectInfo.GetInsertValues(System.Object)">
            <summary>
            Gets the insert values for the specified instance.
            </summary>
            <param name="instance">The instance to retrieve the values from.</param>
            <returns>An array of values to be used for the insert command.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if instance is null.</exception>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if the instance is not of the correct type.</exception>
        </member>
        <member name="M:MicroLite.Mapping.IObjectInfo.GetUpdateValues(System.Object)">
            <summary>
            Gets the update values for the specified instance.
            </summary>
            <param name="instance">The instance to retrieve the values from.</param>
            <returns>An array of values to be used for the update command.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if instance is null.</exception>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if the instance is not of the correct type.</exception>
        </member>
        <member name="M:MicroLite.Mapping.IObjectInfo.HasDefaultIdentifierValue(System.Object)">
            <summary>
            Determines whether the specified instance has the default identifier value.
            </summary>
            <param name="instance">The instance to verify.</param>
            <returns>
              <c>true</c> if the instance has the default identifier value; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if instance is null.</exception>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if the instance is not of the correct type.</exception>
        </member>
        <member name="M:MicroLite.Mapping.IObjectInfo.IsDefaultIdentifier(System.Object)">
            <summary>
            Determines whether the specified identifier value is the default identifier value.
            </summary>
            <param name="identifier">The identifier value to verify.</param>
            <returns>True if the identifier is the default value, otherwise false.</returns>
        </member>
        <member name="M:MicroLite.Mapping.IObjectInfo.SetIdentifierValue(System.Object,System.Object)">
            <summary>
            Sets the property value for the object identifier to the supplied value.
            </summary>
            <param name="instance">The instance to set the value for.</param>
            <param name="identifier">The value to set as the identifier property.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if instance is null.</exception>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if the instance is not of the correct type.</exception>
        </member>
        <member name="M:MicroLite.Mapping.IObjectInfo.VerifyInstanceForInsert(System.Object)">
            <summary>
            Verifies the instance can be inserted.
            </summary>
            <param name="instance">The instance to verify.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if instance is null.</exception>
            <exception cref="T:MicroLite.MicroLiteException">
            Thrown if the instance is not of the correct type or its state is invalid for the specified StatementType.
            </exception>
        </member>
        <member name="P:MicroLite.Mapping.IObjectInfo.ForType">
            <summary>
            Gets type the object info relates to.
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.IObjectInfo.TableInfo">
            <summary>
            Gets the table info for the type the object info relates to.
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown if the object info does not support Insert, Update or Delete.</exception>
        </member>
        <member name="T:MicroLite.Mapping.IdentifierStrategy">
            <summary>
            The supported strategies used to manage a database identifier column value.
            </summary>
        </member>
        <member name="F:MicroLite.Mapping.IdentifierStrategy.DbGenerated">
            <summary>
            The identifier value is generated by the database upon insert (for example Identity in MsSQL or AutoIncrement in SQLite, MySQL or PostgreSQL).
            </summary>
        </member>
        <member name="F:MicroLite.Mapping.IdentifierStrategy.Assigned">
            <summary>
            The identifier value is assigned by user code prior to insert (either manually or via an IListener).
            </summary>
        </member>
        <member name="F:MicroLite.Mapping.IdentifierStrategy.Sequence">
            <summary>
            The identifier value is generated by a database sequence upon insert.
            </summary>
        </member>
        <member name="T:MicroLite.Mapping.ILGeneratorExtensions">
            <summary>
            Extension methods for the ILGenerator class.
            </summary>
        </member>
        <member name="M:MicroLite.Mapping.ILGeneratorExtensions.EmitBoxIfValueType(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Emits the box <see cref="T:System.Reflection.Emit.OpCode"/> if the type is a value type.
            </summary>
            <param name="ilGenerator">The il generator.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:MicroLite.Mapping.ILGeneratorExtensions.EmitEfficientInt(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            Emits the load integer <see cref="T:System.Reflection.Emit.OpCode"/> using the most efficient method.
            </summary>
            <param name="ilGenerator">The il generator.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:MicroLite.Mapping.ILGeneratorExtensions.EmitUnboxIfValueType(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Emits the unbox <see cref="T:System.Reflection.Emit.OpCode"/> if the type is a value type.
            </summary>
            <param name="ilGenerator">The il generator.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:MicroLite.Mapping.ILGeneratorExtensions.EmitUnboxOrCast(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Emits either an unbox <see cref="T:System.Reflection.Emit.OpCode"/> if the type is a value type or a cast to the type.
            </summary>
            <param name="ilGenerator">The il generator.</param>
            <param name="type">The type.</param>
        </member>
        <member name="T:MicroLite.Mapping.Inflection.EnglishInflectionService">
            <summary>
            A class for modifying the grammatical category of an English word.
            </summary>
            <remarks>
            Based upon the example here <see href="http://mattgrande.wordpress.com/2009/10/28/pluralization-helper-for-c/" />
            </remarks>
        </member>
        <member name="T:MicroLite.Mapping.Inflection.IInflectionService">
            <summary>
            The interface for a class which is capable of modifying the grammatical category of words.
            </summary>
        </member>
        <member name="M:MicroLite.Mapping.Inflection.IInflectionService.AddInvariantWord(System.String)">
            <summary>
            Adds a word which is considered invariant, for example 'equipment' or 'species' in English.
            </summary>
            <param name="word">The invariant word.</param>
        </member>
        <member name="M:MicroLite.Mapping.Inflection.IInflectionService.AddRule(System.String,System.String)">
            <summary>
            Adds (or replaces) the rule.
            </summary>
            <param name="searchPattern">The pattern to match upon.</param>
            <param name="replacementPattern">The replacement pattern.</param>
        </member>
        <member name="M:MicroLite.Mapping.Inflection.IInflectionService.ToPlural(System.String)">
            <summary>
            Returns the plural version of the specified singular word or the specified word if there is no plural version.
            </summary>
            <param name="word">The word to be pluralized.</param>
            <returns>The plural word, or if the word cannot be pluralized; the specified word.</returns>
        </member>
        <member name="M:MicroLite.Mapping.Inflection.EnglishInflectionService.AddInvariantWord(System.String)">
            <summary>
            Adds a word which is considered invariant such as equipment or species.
            </summary>
            <param name="word">The invariant word.</param>
        </member>
        <member name="M:MicroLite.Mapping.Inflection.EnglishInflectionService.AddRule(System.String,System.String)">
            <summary>
            Adds (or replaces) the rule.
            </summary>
            <param name="searchPattern">The pattern to match upon.</param>
            <param name="replacementPattern">The replacement pattern.</param>
        </member>
        <member name="M:MicroLite.Mapping.Inflection.EnglishInflectionService.ToPlural(System.String)">
            <summary>
            Returns the plural version of the specified singular word or the specified word if there
            is no plural version.
            </summary>
            <param name="word">The word to be pluralized.</param>
            <returns>
            The plural word, or if the word cannot be pluralized; the specified word.
            </returns>
        </member>
        <member name="T:MicroLite.Mapping.Inflection.InflectionService">
            <summary>
            A class which provides access to inflection services for different cultures.
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.Inflection.InflectionService.English">
            <summary>
            Gets the IInflection service for English (en-GB).
            </summary>
        </member>
        <member name="T:MicroLite.Mapping.LowercaseWithUnderscoresConventionMappingSettings">
            <summary>
            A class containing the convention mapping settings for lowercase with underscore separators (e.g. 'CreditCard' -> 'credit_card').
            </summary>
        </member>
        <member name="M:MicroLite.Mapping.LowercaseWithUnderscoresConventionMappingSettings.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Mapping.LowercaseWithUnderscoresConventionMappingSettings"/> class.
            </summary>
        </member>
        <member name="T:MicroLite.Mapping.MappingException">
            <summary>
            A more specific MicroLiteException which is only thrown for mapping exceptions.
            </summary>
        </member>
        <member name="M:MicroLite.Mapping.MappingException.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Mapping.MappingException"/> class.
            </summary>
        </member>
        <member name="M:MicroLite.Mapping.MappingException.#ctor(System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Mapping.MappingException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:MicroLite.Mapping.MappingException.#ctor(System.String,System.Exception)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Mapping.MappingException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:MicroLite.Mapping.MappingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Mapping.MappingException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:MicroLite.Mapping.ObjectInfo">
            <summary>
            The class which describes a type and the table it is mapped to.
            </summary>
        </member>
        <member name="M:MicroLite.Mapping.ObjectInfo.For(System.Type)">
            <summary>
            Gets the object info for the specified type.
            </summary>
            <param name="forType">The type to get the object info for.</param>
            <returns>The <see cref="T:MicroLite.Mapping.ObjectInfo"/> for the specified <see cref="T:System.Type"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if forType is null.</exception>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if the specified type cannot be used with MicroLite.</exception>
        </member>
        <member name="T:MicroLite.Mapping.ObjectInfoExtensions">
            <summary>
            Extension methods for <see cref="T:MicroLite.Mapping.IObjectInfo"/>.
            </summary>
        </member>
        <member name="M:MicroLite.Mapping.ObjectInfoExtensions.EmitMappings(MicroLite.Mapping.IObjectInfo,System.IO.TextWriter)">
            <summary>
            Emits the mappings for the specified <see cref="T:MicroLite.Mapping.IObjectInfo"/> to the specified <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="objectInfo">The object information to emit.</param>
            <param name="textWriter">The text writer to write to.</param>
        </member>
        <member name="M:MicroLite.Mapping.ObjectInfoExtensions.EmitMappingsToConsole(MicroLite.Mapping.IObjectInfo)">
            <summary>
            Emits the mappings for the specified <see cref="T:MicroLite.Mapping.IObjectInfo"/> to the <see cref="T:System.Console"/>.
            </summary>
            <param name="objectInfo">The object information to emit.</param>
        </member>
        <member name="T:MicroLite.Mapping.PocoObjectInfo">
            <summary>
            The class which describes a type and the table it is mapped to.
            </summary>
        </member>
        <member name="M:MicroLite.Mapping.PocoObjectInfo.#ctor(System.Type,MicroLite.Mapping.TableInfo)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Mapping.PocoObjectInfo"/> class.
            </summary>
            <param name="forType">The type the object info relates to.</param>
            <param name="tableInfo">The table info.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if forType or tableInfo are null.
            </exception>
        </member>
        <member name="M:MicroLite.Mapping.PocoObjectInfo.CreateInstance(System.Data.IDataReader)">
            <summary>
            Creates a new instance of the type populated with the values from the specified IDataReader.
            </summary>
            <param name="reader">The IDataReader containing the values to build the instance from.</param>
            <returns>A new instance of the type populated with the values from the specified IDataReader.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if reader is null.</exception>
        </member>
        <member name="M:MicroLite.Mapping.PocoObjectInfo.GetColumnInfo(System.String)">
            <summary>
            Gets the column information for the column with the specified name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns>
            The ColumnInfo or null if no column is mapped for the object with the specified name.
            </returns>
        </member>
        <member name="M:MicroLite.Mapping.PocoObjectInfo.GetIdentifierValue(System.Object)">
            <summary>
            Gets the property value for the object identifier.
            </summary>
            <param name="instance">The instance to retrieve the value from.</param>
            <returns>The value of the identifier property.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if instance is null.</exception>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if the instance is not of the correct type.</exception>
        </member>
        <member name="M:MicroLite.Mapping.PocoObjectInfo.GetInsertValues(System.Object)">
            <summary>
            Gets the insert values for the specified instance.
            </summary>
            <param name="instance">The instance to retrieve the values from.</param>
            <returns>An array of values to be used for the insert command.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if instance is null.</exception>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if the instance is not of the correct type.</exception>
        </member>
        <member name="M:MicroLite.Mapping.PocoObjectInfo.GetUpdateValues(System.Object)">
            <summary>
            Gets the update values for the specified instance.
            </summary>
            <param name="instance">The instance to retrieve the values from.</param>
            <returns>An array of values to be used for the update command.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if instance is null.</exception>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if the instance is not of the correct type.</exception>
        </member>
        <member name="M:MicroLite.Mapping.PocoObjectInfo.HasDefaultIdentifierValue(System.Object)">
            <summary>
            Determines whether the specified instance has the default identifier value.
            </summary>
            <param name="instance">The instance to verify.</param>
            <returns>
              <c>true</c> if the instance has the default identifier value; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if instance is null.</exception>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if the instance is not of the correct type.</exception>
        </member>
        <member name="M:MicroLite.Mapping.PocoObjectInfo.IsDefaultIdentifier(System.Object)">
            <summary>
            Determines whether the specified identifier value is the default identifier value.
            </summary>
            <param name="identifier">The identifier value to verify.</param>
            <returns>
            True if the identifier is the default value, otherwise false.
            </returns>
        </member>
        <member name="M:MicroLite.Mapping.PocoObjectInfo.SetIdentifierValue(System.Object,System.Object)">
            <summary>
            Sets the property value for the object identifier to the supplied value.
            </summary>
            <param name="instance">The instance to set the value for.</param>
            <param name="identifier">The value to set as the identifier property.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if instance is null.</exception>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if the instance is not of the correct type.</exception>
        </member>
        <member name="M:MicroLite.Mapping.PocoObjectInfo.VerifyInstanceForInsert(System.Object)">
            <summary>
            Verifies the instance can be inserted.
            </summary>
            <param name="instance">The instance to verify.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if instance is null.</exception>
            <exception cref="T:MicroLite.MicroLiteException">
            Thrown if the instance is not of the correct type or its state is invalid for the specified StatementType.
            </exception>
        </member>
        <member name="P:MicroLite.Mapping.PocoObjectInfo.ForType">
            <summary>
            Gets type the object info relates to.
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.PocoObjectInfo.TableInfo">
            <summary>
            Gets the table info for the type the object info relates to.
            </summary>
        </member>
        <member name="T:MicroLite.Mapping.TableInfo">
            <summary>
            A class which contains information about a database table which a class is mapped to.
            </summary>
        </member>
        <member name="M:MicroLite.Mapping.TableInfo.#ctor(System.Collections.Generic.IList{MicroLite.Mapping.ColumnInfo},MicroLite.Mapping.IdentifierStrategy,System.String,System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Mapping.TableInfo"/> class.
            </summary>
            <param name="columns">The columns that are mapped for the table.</param>
            <param name="identifierStrategy">The identifier strategy used by the table.</param>
            <param name="name">The name of the table.</param>
            <param name="schema">The database schema the table exists within (e.g. 'dbo'); otherwise null.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if columns or name are null.</exception>
            <exception cref="T:MicroLite.Mapping.MappingException">Thrown if no there is a problem with the column mappings.</exception>
        </member>
        <member name="P:MicroLite.Mapping.TableInfo.Columns">
            <summary>
            Gets the columns that are mapped for the table.
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.TableInfo.IdentifierColumn">
            <summary>
            Gets the ColumnInfo of the column that is the table identifier column (primary key).
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.TableInfo.IdentifierStrategy">
            <summary>
            Gets the identifier strategy used by the table.
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.TableInfo.InsertColumnCount">
            <summary>
            Gets the number of columns which can be inserted.
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.TableInfo.Name">
            <summary>
            Gets the database schema the table exists within (e.g. 'dbo'); otherwise null.
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.TableInfo.Schema">
            <summary>
            Gets the name of the schema the table exists within.
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.TableInfo.UpdateColumnCount">
            <summary>
            Gets the number of columns which can be updated.
            </summary>
        </member>
        <member name="T:MicroLite.Mapping.UppercaseWithUnderscoresConventionMappingSettings">
            <summary>
            A class containing the convention mapping settings for uppercase with underscore separators (e.g. 'CreditCard' -> 'CREDIT_CARD').
            </summary>
        </member>
        <member name="M:MicroLite.Mapping.UppercaseWithUnderscoresConventionMappingSettings.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Mapping.UppercaseWithUnderscoresConventionMappingSettings"/> class.
            </summary>
        </member>
        <member name="T:MicroLite.ObjectDelta">
            <summary>
            An class which contains partial (delta) changes to an object.
            </summary>
        </member>
        <member name="M:MicroLite.ObjectDelta.#ctor(System.Type,System.Object)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.ObjectDelta"/> class.
            </summary>
            <param name="forType">The type the changes relate to.</param>
            <param name="identifier">The identifier for the instance of the type the changes relate to.</param>
        </member>
        <member name="M:MicroLite.ObjectDelta.AddChange(System.String,System.Object)">
            <summary>
            Adds the a property value change.
            </summary>
            <param name="propertyName">The name of the property to change.</param>
            <param name="newValue">The new value for the property (can be null).</param>
        </member>
        <member name="P:MicroLite.ObjectDelta.ChangeCount">
            <summary>
            Gets the number of changes in the delta.
            </summary>
        </member>
        <member name="P:MicroLite.ObjectDelta.Changes">
            <summary>
            Gets the changes contained in the delta.
            </summary>
        </member>
        <member name="P:MicroLite.ObjectDelta.ForType">
            <summary>
            Gets for type the changes relate to.
            </summary>
        </member>
        <member name="P:MicroLite.ObjectDelta.Identifier">
            <summary>
            Gets the identifier for the instance of the type the changes relate to.
            </summary>
        </member>
        <member name="T:MicroLite.PagedResult`1">
            <summary>
            A class which contains the result of a paged query.
            </summary>
            <typeparam name="T">The type of object the contained in the results.</typeparam>
        </member>
        <member name="M:MicroLite.PagedResult`1.#ctor(System.Int32,System.Collections.Generic.IList{`0},System.Int32,System.Int32)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.PagedResult`1"/> class.
            </summary>
            <param name="page">The page number for the results.</param>
            <param name="results">The results in the page.</param>
            <param name="resultsPerPage">The number of results per page.</param>
            <param name="totalResults">The total number of results for the query.</param>
        </member>
        <member name="P:MicroLite.PagedResult`1.HasResults">
            <summary>
            Gets a value indicating whether this page contains any results.
            </summary>
        </member>
        <member name="P:MicroLite.PagedResult`1.MoreResultsAvailable">
            <summary>
            Gets a value indicating whether there are more results available.
            </summary>
        </member>
        <member name="P:MicroLite.PagedResult`1.Page">
            <summary>
            Gets the page number for the results.
            </summary>
        </member>
        <member name="P:MicroLite.PagedResult`1.Results">
            <summary>
            Gets the results in the page.
            </summary>
        </member>
        <member name="P:MicroLite.PagedResult`1.ResultsPerPage">
            <summary>
            Gets the number of results per page.
            </summary>
        </member>
        <member name="P:MicroLite.PagedResult`1.TotalPages">
            <summary>
            Gets the total number of pages for the query.
            </summary>
        </member>
        <member name="P:MicroLite.PagedResult`1.TotalResults">
            <summary>
            Gets the total number of results for the query.
            </summary>
        </member>
        <member name="T:MicroLite.PagingOptions">
            <summary>
            A struct containing the count and offset to be used for paged queries.
            </summary>
        </member>
        <member name="M:MicroLite.PagingOptions.#ctor(System.Int32,System.Int32)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.PagingOptions"/> struct.
            </summary>
            <param name="count">The count (number of records to return).</param>
            <param name="offset">The offset (number of records to skip).</param>
        </member>
        <member name="M:MicroLite.PagingOptions.ForPage(System.Int32,System.Int32)">
            <summary>
            Gets the paging options for the specified page number.
            </summary>
            <param name="page">The page number (starting at 1).</param>
            <param name="resultsPerPage">The results per page.</param>
            <returns>The paging options for the specified page number.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if page or resultsPerPage are less than 1.</exception>
        </member>
        <member name="M:MicroLite.PagingOptions.op_Inequality(MicroLite.PagingOptions,MicroLite.PagingOptions)">
            <summary>
            Checks whether two separate PagingOptions instances are not equal.
            </summary>
            <param name="pagingOptions1">The paging options to check.</param>
            <param name="pagingOptions2">The paging options to check against.</param>
            <returns><c>true</c> if the instances are not considered equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MicroLite.PagingOptions.op_Equality(MicroLite.PagingOptions,MicroLite.PagingOptions)">
            <summary>
            Checks whether two separate PagingOptions instances are equal.
            </summary>
            <param name="pagingOptions1">The paging options to check.</param>
            <param name="pagingOptions2">The paging options to check against.</param>
            <returns><c>true</c> if the instances are considered equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MicroLite.PagingOptions.SkipTake(System.Int32,System.Int32)">
            <summary>
            Gets the paging options for the specified skip and take numbers.
            </summary>
            <param name="skip">The number of records to skip.</param>
            <param name="take">The number of records to take.</param>
            <returns>The paging options for the specified skip and take numbers.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if skip is below 0 or take is less than 1.</exception>
        </member>
        <member name="M:MicroLite.PagingOptions.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MicroLite.PagingOptions.Equals(MicroLite.PagingOptions)">
            <summary>
            Determines whether the specified <see cref="T:MicroLite.PagingOptions"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:MicroLite.PagingOptions"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:MicroLite.PagingOptions"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MicroLite.PagingOptions.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="P:MicroLite.PagingOptions.Count">
            <summary>
            Gets the number of record to return.
            </summary>
        </member>
        <member name="P:MicroLite.PagingOptions.Offset">
            <summary>
            Gets the number of records to skip.
            </summary>
        </member>
        <member name="P:MicroLite.PagingOptions.None">
            <summary>
            Gets the paging options for when no paging is required.
            </summary>
        </member>
        <member name="T:MicroLite.ParameterNameComparer">
            <summary>
            An implementation of <see cref="T:System.Collections.Generic.IComparer`1"/> to sort parameter names.
            </summary>
            <remarks>
            A special use case to ensure that @p9 is sorted after @p10 which is not the case with standard string sorting.
            </remarks>
        </member>
        <member name="M:MicroLite.ParameterNameComparer.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:MicroLite.ParameterNameComparer"/> class from being created.
            </summary>
        </member>
        <member name="M:MicroLite.ParameterNameComparer.Compare(System.String,System.String)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.Value Meaning Less than zero<paramref name="x" /> is less than <paramref name="y" />.Zero<paramref name="x" /> equals <paramref name="y" />.Greater than zero<paramref name="x" /> is greater than <paramref name="y" />.
            </returns>
        </member>
        <member name="P:MicroLite.ParameterNameComparer.Instance">
            <summary>
            Gets the parameter name comparer instance.
            </summary>
        </member>
        <member name="T:MicroLite.SqlArgument">
            <summary>
            A representation of an object and its DbType in a SqlQuery.
            </summary>
        </member>
        <member name="M:MicroLite.SqlArgument.#ctor(System.Object)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.SqlArgument"/> struct.
            </summary>
            <param name="value">The argument value.</param>
        </member>
        <member name="M:MicroLite.SqlArgument.#ctor(System.Object,System.Data.DbType)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.SqlArgument"/> struct.
            </summary>
            <param name="value">The argument value.</param>
            <param name="dbType">The DbType of the value.</param>
        </member>
        <member name="M:MicroLite.SqlArgument.op_Inequality(MicroLite.SqlArgument,MicroLite.SqlArgument)">
            <summary>
            Checks whether two separate SqlArgument instances are not equal.
            </summary>
            <param name="sqlArgument1">The SqlArgument to check.</param>
            <param name="sqlArgument2">The SqlArgument to check against.</param>
            <returns><c>true</c> if the instances are not considered equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MicroLite.SqlArgument.op_Equality(MicroLite.SqlArgument,MicroLite.SqlArgument)">
            <summary>
            Checks whether two separate SqlArgument instances are equal.
            </summary>
            <param name="sqlArgument1">The SqlArgument to check.</param>
            <param name="sqlArgument2">The SqlArgument to check against.</param>
            <returns><c>true</c> if the instances are considered equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MicroLite.SqlArgument.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MicroLite.SqlArgument.Equals(MicroLite.SqlArgument)">
            <summary>
            Determines whether the specified <see cref="T:MicroLite.SqlArgument"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:MicroLite.SqlArgument"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:MicroLite.SqlArgument"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MicroLite.SqlArgument.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="P:MicroLite.SqlArgument.DbType">
            <summary>
            Gets the DbType of the value.
            </summary>
        </member>
        <member name="P:MicroLite.SqlArgument.Value">
            <summary>
            Gets the value of the argument.
            </summary>
        </member>
        <member name="T:MicroLite.SqlQuery">
            <summary>
            A class which represents an SQL command and its argument values.
            </summary>
        </member>
        <member name="M:MicroLite.SqlQuery.#ctor(System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.SqlQuery"/> class with the specified command text and no argument values.
            </summary>
            <param name="commandText">The SQL command text to be executed against the data source.</param>
        </member>
        <member name="M:MicroLite.SqlQuery.#ctor(System.String,System.Object[])">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.SqlQuery"/> class with the specified command text and argument values.
            </summary>
            <param name="commandText">The SQL command text to be executed against the data source.</param>
            <param name="arguments">The argument values for the SQL command.</param>
        </member>
        <member name="M:MicroLite.SqlQuery.#ctor(System.String,MicroLite.SqlArgument[])">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.SqlQuery"/> class with the specified command text and <see cref="T:MicroLite.SqlArgument"/> values.
            </summary>
            <param name="commandText">The SQL command text to be executed against the data source.</param>
            <param name="arguments">The <see cref="T:MicroLite.SqlArgument"/>s for the SQL command.</param>
        </member>
        <member name="M:MicroLite.SqlQuery.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MicroLite.SqlQuery.Equals(MicroLite.SqlQuery)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:MicroLite.SqlQuery.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:MicroLite.SqlQuery.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:MicroLite.SqlQuery.Arguments">
            <summary>
            Gets the <see cref="T:MicroLite.SqlArgument"/>s for the SQL command.
            </summary>
        </member>
        <member name="P:MicroLite.SqlQuery.CommandText">
            <summary>
            Gets the SQL command text to be executed against the data source.
            </summary>
        </member>
        <member name="P:MicroLite.SqlQuery.Timeout">
            <summary>
            Gets or sets the timeout in seconds for the query.
            </summary>
            <remarks>Defaults to 30 seconds.</remarks>
        </member>
        <member name="P:MicroLite.SqlQuery.ArgumentsArray">
            <summary>
            Gets the private SqlArgument array.
            </summary>
        </member>
        <member name="T:MicroLite.SqlString">
            <summary>
            A class which contains the clauses of a SQL command.
            </summary>
        </member>
        <member name="M:MicroLite.SqlString.Parse(System.String,MicroLite.Clauses)">
            <summary>
            Parses the specified command text into a SqlString instance populating the specified <see cref="T:MicroLite.Clauses"/> if
            present in the command text.
            </summary>
            <param name="commandText">The SQL command text.</param>
            <param name="clauses">The clauses to include in the SqlString.</param>
            <returns>An SqlString instance populating the specified <see cref="T:MicroLite.Clauses"/> if present in the command text.</returns>
        </member>
        <member name="P:MicroLite.SqlString.From">
            <summary>
            Gets value of the FROM clause of the command text or an empty string if the command text does not contain a FROM clause
            or <see cref="T:MicroLite.Clauses"/>.From was not specified.
            </summary>
            <remarks>This is the value only without the FROM keyword.</remarks>
        </member>
        <member name="P:MicroLite.SqlString.GroupBy">
            <summary>
            Gets value of the GROUP BY clause of the command text or an empty string if the command text does not contain a GROUP BY clause
            or <see cref="T:MicroLite.Clauses"/>.GroupBy was not specified.
            </summary>
            <remarks>This is the value only without the GROUP BY keyword.</remarks>
        </member>
        <member name="P:MicroLite.SqlString.OrderBy">
            <summary>
            Gets value of the ORDER BY clause of the command text or an empty string if the command text does not contain a ORDER BY clause
            or <see cref="T:MicroLite.Clauses"/>.OrderBy was not specified.
            </summary>
            <remarks>This is the value only without the ORDER BY keyword.</remarks>
        </member>
        <member name="P:MicroLite.SqlString.Select">
            <summary>
            Gets value of the SELECT clause of the command text or an empty string if the command text does not contain a SELECT clause
            or <see cref="T:MicroLite.Clauses"/>.Select was not specified.
            </summary>
            <remarks>This is the value only without the SELECT keyword.</remarks>
        </member>
        <member name="P:MicroLite.SqlString.Where">
            <summary>
            Gets value of the WHERE clause of the command text or an empty string if the command text does not contain a WHERE clause
            or <see cref="T:MicroLite.Clauses"/>.Where was not specified.
            </summary>
            <remarks>This is the value only without the WHERE keyword.</remarks>
        </member>
        <member name="T:MicroLite.SqlUtility">
            <summary>
            A utility class containing useful methods for manipulating SQL.
            </summary>
        </member>
        <member name="M:MicroLite.SqlUtility.GetFirstParameterPosition(System.String)">
            <summary>
            Gets the position of the first parameter in the specified SQL command text.
            </summary>
            <param name="commandText">The SQL command text.</param>
            <returns>
            The position of the first parameter in the command text or -1 if no parameters are found.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null.</exception>
        </member>
        <member name="M:MicroLite.SqlUtility.GetParameterNames(System.String)">
            <summary>
            Gets the parameter names from the specified SQL command text or an empty list if the command text does not
            contain any named parameters.
            </summary>
            <param name="commandText">The SQL command text.</param>
            <returns>
            A list containing the parameter names in the SQL command text.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null.</exception>
            <remarks>
            Will return an empty list if the command text has no parameter names or the parameter names are all '?'
            (if the dialect does not support named parameters).
            </remarks>
        </member>
        <member name="M:MicroLite.SqlUtility.RenumberParameters(System.String,System.Int32)">
            <summary>
            Re-numbers the parameters in the SQL based upon the total number of arguments.
            </summary>
            <param name="sql">The SQL.</param>
            <param name="totalArgumentCount">The total number of arguments.</param>
            <returns>The re-numbered SQL</returns>
        </member>
        <member name="T:MicroLite.TypeConverters.EnumTypeConverter">
            <summary>
            An ITypeConverter which can convert Enum values to and from database values.
            </summary>
            <remarks>
            It ensures that the database value is converted to and from the underlying storage type of the Enum to allow for db
            columns being byte, short, integer or long.
            </remarks>
        </member>
        <member name="T:MicroLite.TypeConverters.ITypeConverter">
            <summary>
            The interface for a class which can convert between property type values and database values.
            </summary>
        </member>
        <member name="M:MicroLite.TypeConverters.ITypeConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this type converter can convert values for the specified type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
              <c>true</c> if this instance can convert the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MicroLite.TypeConverters.ITypeConverter.ConvertFromDbValue(System.Object,System.Type)">
            <summary>
            Converts the specified database value into an instance of the specified type.
            </summary>
            <param name="value">The database value to be converted.</param>
            <param name="type">The type to convert to.</param>
            <returns>An instance of the specified type containing the specified value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if type is null.</exception>
        </member>
        <member name="M:MicroLite.TypeConverters.ITypeConverter.ConvertFromDbValue(System.Data.IDataReader,System.Int32,System.Type)">
            <summary>
            Converts value at the specified index in the IDataReader into an instance of the specified type.
            </summary>
            <param name="reader">The IDataReader containing the results.</param>
            <param name="index">The index of the record to read from the IDataReader.</param>
            <param name="type">The type to convert result value to.</param>
            <returns>An instance of the specified type containing the specified value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if reader or type is null.</exception>
        </member>
        <member name="M:MicroLite.TypeConverters.ITypeConverter.ConvertToDbValue(System.Object,System.Type)">
            <summary>
            Converts the specified value into an instance of the database value.
            </summary>
            <param name="value">The value to be converted.</param>
            <param name="type">The type to convert from.</param>
            <returns>An instance of the corresponding database type containing the value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if type is null.</exception>
        </member>
        <member name="M:MicroLite.TypeConverters.EnumTypeConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this type converter can convert values for the specified type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
              <c>true</c> if this instance can convert the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MicroLite.TypeConverters.EnumTypeConverter.ConvertFromDbValue(System.Object,System.Type)">
            <summary>
            Converts the specified database value into an instance of the specified type.
            </summary>
            <param name="value">The database value to be converted.</param>
            <param name="type">The type to convert to.</param>
            <returns>An instance of the specified type containing the specified value.</returns>
        </member>
        <member name="M:MicroLite.TypeConverters.EnumTypeConverter.ConvertFromDbValue(System.Data.IDataReader,System.Int32,System.Type)">
            <summary>
            Converts value at the specified index in the IDataReader into an instance of the specified type.
            </summary>
            <param name="reader">The IDataReader containing the results.</param>
            <param name="index">The index of the record to read from the IDataReader.</param>
            <param name="type">The type to convert result value to.</param>
            <returns>An instance of the specified type containing the specified value.</returns>
        </member>
        <member name="M:MicroLite.TypeConverters.EnumTypeConverter.ConvertToDbValue(System.Object,System.Type)">
            <summary>
            Converts the specified value into an instance of the database value.
            </summary>
            <param name="value">The value to be converted.</param>
            <param name="type">The type to convert from.</param>
            <returns>An instance of the corresponding database type containing the value.</returns>
        </member>
        <member name="T:MicroLite.TypeConverters.ObjectTypeConverter">
            <summary>
            An ITypeConverter which uses Convert.ChangeType.
            </summary>
            <remarks>
            It is the default ITypeConverter, which can be used if no suitable specific implementation exists.
            </remarks>
        </member>
        <member name="M:MicroLite.TypeConverters.ObjectTypeConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this type converter can convert values for the specified type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
              <c>true</c> if this instance can convert the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MicroLite.TypeConverters.ObjectTypeConverter.ConvertFromDbValue(System.Object,System.Type)">
            <summary>
            Converts the specified database value into an instance of the specified type.
            </summary>
            <param name="value">The database value to be converted.</param>
            <param name="type">The type to convert to.</param>
            <returns>An instance of the specified type containing the specified value.</returns>
        </member>
        <member name="M:MicroLite.TypeConverters.ObjectTypeConverter.ConvertFromDbValue(System.Data.IDataReader,System.Int32,System.Type)">
            <summary>
            Converts value at the specified index in the IDataReader into an instance of the specified type.
            </summary>
            <param name="reader">The IDataReader containing the results.</param>
            <param name="index">The index of the record to read from the IDataReader.</param>
            <param name="type">The type to convert result value to.</param>
            <returns>An instance of the specified type containing the specified value.</returns>
            <exception cref="T:System.ArgumentNullException">thrown if propertyType is null.</exception>
        </member>
        <member name="M:MicroLite.TypeConverters.ObjectTypeConverter.ConvertToDbValue(System.Object,System.Type)">
            <summary>
            Converts the specified value into an instance of the database value.
            </summary>
            <param name="value">The value to be converted.</param>
            <param name="type">The type to convert from.</param>
            <returns>An instance of the corresponding database type containing the value.</returns>
        </member>
        <member name="T:MicroLite.TypeConverters.TimeSpanTypeConverter">
            <summary>
            An ITypeConverter which can convert a TimeSpan to and from the stored database value of a 64 bit integer column.
            </summary>
        </member>
        <member name="M:MicroLite.TypeConverters.TimeSpanTypeConverter.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.TypeConverters.TimeSpanTypeConverter"/> class.
            </summary>
        </member>
        <member name="M:MicroLite.TypeConverters.TimeSpanTypeConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this type converter can convert values for the specified type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
              <c>true</c> if this instance can convert the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MicroLite.TypeConverters.TimeSpanTypeConverter.ConvertFromDbValue(System.Object,System.Type)">
            <summary>
            Converts the specified database value into an instance of the specified type.
            </summary>
            <param name="value">The database value to be converted.</param>
            <param name="type">The type to convert to.</param>
            <returns>An instance of the specified type containing the specified value.</returns>
        </member>
        <member name="M:MicroLite.TypeConverters.TimeSpanTypeConverter.ConvertFromDbValue(System.Data.IDataReader,System.Int32,System.Type)">
            <summary>
            Converts value at the specified index in the IDataReader into an instance of the specified type.
            </summary>
            <param name="reader">The IDataReader containing the results.</param>
            <param name="index">The index of the record to read from the IDataReader.</param>
            <param name="type">The type to convert result value to.</param>
            <returns>An instance of the specified type containing the specified value.</returns>
        </member>
        <member name="M:MicroLite.TypeConverters.TimeSpanTypeConverter.ConvertToDbValue(System.Object,System.Type)">
            <summary>
            Converts the specified value into an instance of the database value.
            </summary>
            <param name="value">The value to be converted.</param>
            <param name="type">The type to convert from.</param>
            <returns>An instance of the corresponding database type containing the value.</returns>
        </member>
        <member name="T:MicroLite.TypeConverters.TypeConverter">
            <summary>
            A class which allows access to <see cref="T:MicroLite.TypeConverters.ITypeConverter"/>s.
            </summary>
        </member>
        <member name="M:MicroLite.TypeConverters.TypeConverter.For(System.Type)">
            <summary>
            Gets the <see cref="T:MicroLite.TypeConverters.ITypeConverter"/> for the specified type.
            </summary>
            <param name="type">The type to get the converter for.</param>
            <returns>The <see cref="T:MicroLite.TypeConverters.ITypeConverter"/> for the specified type, or null if no specific type converter exists for the type.</returns>
            <remarks>
            If For returns null, the TypeConverter.Default can be used.
            </remarks>
        </member>
        <member name="M:MicroLite.TypeConverters.TypeConverter.IsNotEntityAndConvertible(System.Type)">
            <summary>
            Determines whether the type is not an entity type and is a convertible type.
            </summary>
            <param name="type">The type to test.</param>
            <returns>
            true if the type is not an entity and can be converted.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if type is null.</exception>
        </member>
        <member name="M:MicroLite.TypeConverters.TypeConverter.RegisterTypeMapping(System.Type,System.Data.DbType)">
            <summary>
            Registers the type mapping between a Type and DbType.
            </summary>
            <param name="type">The Type to be mapped.</param>
            <param name="dbType">The DbType to be mapped to.</param>
        </member>
        <member name="M:MicroLite.TypeConverters.TypeConverter.ResolveActualType(System.Type)">
            <summary>
            Resolves the actual type.
            </summary>
            <param name="type">The type to resolve.</param>
            <returns>
            The actual type (e.g. the inner type if it is a nullable value).
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if type is null.</exception>
        </member>
        <member name="M:MicroLite.TypeConverters.TypeConverter.ResolveDbType(System.Type)">
            <summary>
            Resolves the DbType mapped to the Type.
            </summary>
            <param name="type">The Type to resolve the DbType from.</param>
            <returns>The DbType the Type maps to.</returns>
            <exception cref="T:System.NotSupportedException">Thrown if the Type is not mapped to a DbType.</exception>
        </member>
        <member name="P:MicroLite.TypeConverters.TypeConverter.Converters">
            <summary>
            Gets the type converter collection which contains all type converters registered with the MicroLite ORM framework.
            </summary>
        </member>
        <member name="P:MicroLite.TypeConverters.TypeConverter.Default">
            <summary>
            Gets the default type converter which can be used if there is no specific type converter for a given type.
            </summary>
        </member>
        <member name="T:MicroLite.TypeConverters.TypeConverterCollection">
            <summary>
            The class which contains the ITypeConverters used by the MicroLite ORM framework.
            </summary>
            <remarks>The collection acts in the same way as a stack, the last converter added is the first used if it handles the type.</remarks>
        </member>
        <member name="M:MicroLite.TypeConverters.TypeConverterCollection.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.TypeConverters.TypeConverterCollection"/> class.
            </summary>
        </member>
        <member name="M:MicroLite.TypeConverters.TypeConverterCollection.InsertItem(System.Int32,MicroLite.TypeConverters.ITypeConverter)">
            <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1" /> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
        </member>
        <member name="T:MicroLite.TypeConverters.UriTypeConverter">
            <summary>
            An ITypeConverter which can convert a Uri to and from the stored database value of a string column.
            </summary>
        </member>
        <member name="M:MicroLite.TypeConverters.UriTypeConverter.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.TypeConverters.UriTypeConverter"/> class.
            </summary>
        </member>
        <member name="M:MicroLite.TypeConverters.UriTypeConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this type converter can convert values for the specified type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
              <c>true</c> if this instance can convert the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MicroLite.TypeConverters.UriTypeConverter.ConvertFromDbValue(System.Object,System.Type)">
            <summary>
            Converts the specified database value into an instance of the specified type.
            </summary>
            <param name="value">The database value to be converted.</param>
            <param name="type">The type to convert to.</param>
            <returns>An instance of the specified type containing the specified value.</returns>
        </member>
        <member name="M:MicroLite.TypeConverters.UriTypeConverter.ConvertFromDbValue(System.Data.IDataReader,System.Int32,System.Type)">
            <summary>
            Converts value at the specified index in the IDataReader into an instance of the specified type.
            </summary>
            <param name="reader">The IDataReader containing the results.</param>
            <param name="index">The index of the record to read from the IDataReader.</param>
            <param name="type">The type to convert result value to.</param>
            <returns>An instance of the specified type containing the specified value.</returns>
        </member>
        <member name="M:MicroLite.TypeConverters.UriTypeConverter.ConvertToDbValue(System.Object,System.Type)">
            <summary>
            Converts the specified value into an instance of the database value.
            </summary>
            <param name="value">The value to be converted.</param>
            <param name="type">The type to convert from.</param>
            <returns>An instance of the corresponding database type containing the value.</returns>
        </member>
        <member name="T:MicroLite.TypeConverters.XDocumentTypeConverter">
            <summary>
            An ITypeConverter which can convert an XDocument to and from the stored database value of either an xml or string column.
            </summary>
        </member>
        <member name="M:MicroLite.TypeConverters.XDocumentTypeConverter.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.TypeConverters.XDocumentTypeConverter"/> class.
            </summary>
        </member>
        <member name="M:MicroLite.TypeConverters.XDocumentTypeConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this type converter can convert values for the specified type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
              <c>true</c> if this instance can convert the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MicroLite.TypeConverters.XDocumentTypeConverter.ConvertFromDbValue(System.Object,System.Type)">
            <summary>
            Converts the specified database value into an instance of the specified type.
            </summary>
            <param name="value">The database value to be converted.</param>
            <param name="type">The type to convert to.</param>
            <returns>An instance of the specified type containing the specified value.</returns>
        </member>
        <member name="M:MicroLite.TypeConverters.XDocumentTypeConverter.ConvertFromDbValue(System.Data.IDataReader,System.Int32,System.Type)">
            <summary>
            Converts value at the specified index in the IDataReader into an instance of the specified type.
            </summary>
            <param name="reader">The IDataReader containing the results.</param>
            <param name="index">The index of the record to read from the IDataReader.</param>
            <param name="type">The type to convert result value to.</param>
            <returns>An instance of the specified type containing the specified value.</returns>
        </member>
        <member name="M:MicroLite.TypeConverters.XDocumentTypeConverter.ConvertToDbValue(System.Object,System.Type)">
            <summary>
            Converts the specified value into an instance of the database value.
            </summary>
            <param name="value">The value to be converted.</param>
            <param name="type">The type to convert from.</param>
            <returns>An instance of the corresponding database type containing the value.</returns>
        </member>
    </members>
</doc>
